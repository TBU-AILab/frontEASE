@inject IResourceHandler resourceHandler

@inject SignInManager<ApplicationUser> signInManager
@inject NavigationManager navigationManager
@inject IdentityRedirectManager redirectManager

<LoginStatusMessage Message="@errorMessage" />
<EditForm Model="LoginModel" method="post" OnValidSubmit="LoginUser" FormName="login">
    <DataAnnotationsValidator />

    <Microsoft.AspNetCore.Components.Forms.ValidationSummary class="text-danger" role="alert" />

    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Div Class="mb-3">
                <Label For="username" Class="form-label red-asterisk-required" Margin="Margin.Is1.FromBottom">
                    @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.Username), PropertyDisplayResourceType.FIELD)))
                </Label>
                <InputText id="username"
                           @bind-Value="LoginModel.Username"
                           class="form-control"
                           placeholder="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.Username), PropertyDisplayResourceType.PLACEHOLDER)))" />
                <ValidationMessage For="() => LoginModel.Username" class="text-danger" />
            </Div>
        </Column>

        <Column ColumnSize="ColumnSize.IsFull">
            <Div Class="mb-3">
                <Label For="password" Class="form-label red-asterisk-required" Margin="Margin.Is1.FromBottom">
                    @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.Password), PropertyDisplayResourceType.FIELD)))
                </Label>
                <InputText id="password"
                           type="password"
                           @bind-Value="LoginModel.Password"
                           class="form-control"
                           placeholder="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.Password), PropertyDisplayResourceType.PLACEHOLDER)))" />
                <ValidationMessage For="() => LoginModel.Password" class="text-danger" />
            </Div>
        </Column>

        <Column ColumnSize="ColumnSize.IsFull">
            <Div Class="checkbox mb-3">
                <Label Class="form-label checkbox-container">
                    <InputCheckbox @bind-Value="LoginModel.RememberMe"
                                   class="darker-border-checkbox form-check-input form-check" />
                    <Span Class="checkbox-label" Margin="Margin.Is3.FromStart">
                        @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.RememberMe), PropertyDisplayResourceType.FIELD)))
                    </Span>
                </Label>
            </Div>
        </Column>

        <Column ColumnSize="ColumnSize.Is4.OnWidescreen.Is8.WithOffset.OnWidescreen">
            <Button TextWeight="TextWeight.Bold" Color="Color.Primary" Type="ButtonType.Submit" Class="full-width" Disabled="@(loginInProgress)">
                @if (loginInProgress)
                {
                    <SpinnerButton SmallControlSpinner="true" TextSize="TextSize.Large" DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Login}")}")" />
                }
                else
                {
                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Login}"))
                }
            </Button>
        </Column>
    </Row>

</EditForm>

@code {
    [SupplyParameterFromForm]
    private LoginDto LoginModel { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private bool loginInProgress;
    private string? errorMessage;


    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
        await base.OnInitializedAsync();
    }

    public async Task LoginUser()
    {
        loginInProgress = true;

        var result = await signInManager.PasswordSignInAsync(LoginModel!.Username, LoginModel!.Password, LoginModel!.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            redirectManager.RedirectTo(string.IsNullOrWhiteSpace(ReturnUrl) ? "/" : ReturnUrl);
        }
        else
        {
            errorMessage = resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIConstants.Error}.{UIActionConstants.Login}");
        }

        loginInProgress = false;
    }
}