// <auto-generated />
using System;
using FrontEASE.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FrontEASE.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUserCompany", b =>
                {
                    b.Property<Guid>("CompaniesID")
                        .HasColumnType("uuid");

                    b.Property<string>("UsersId")
                        .HasColumnType("text");

                    b.HasKey("CompaniesID", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("ApplicationUserCompany", "Auth");
                });

            modelBuilder.Entity("ApplicationUserTask", b =>
                {
                    b.Property<string>("MembersId")
                        .HasColumnType("text");

                    b.Property<Guid>("TasksID")
                        .HasColumnType("uuid");

                    b.HasKey("MembersId", "TasksID");

                    b.HasIndex("TasksID");

                    b.ToTable("ApplicationUserTask");
                });

            modelBuilder.Entity("CompanyTask", b =>
                {
                    b.Property<Guid>("MemberGroupsID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TasksID")
                        .HasColumnType("uuid");

                    b.HasKey("MemberGroupsID", "TasksID");

                    b.HasIndex("TasksID");

                    b.ToTable("CompanyTask");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Companies.Company", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<Guid?>("AddressID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("ImageID")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NameAbbreviation")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("AddressID")
                        .IsUnique();

                    b.HasIndex("ImageID")
                        .IsUnique();

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Company_IsDeleted");

                    b.ToTable("Companies", "Auth");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Jobs.JobLog", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<DateTime?>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("JobName", "Success", "DateStart")
                        .HasDatabaseName("IX_JobLog_JobName_Success_DateStart");

                    b.ToTable("JobExecutions", "App");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.General.UserPreferenceGeneralOptions", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<int>("ColorScheme")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("UserPreferenceGeneralOptions", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.Tokens.Connectors.UserPreferenceTokenOptionConnectorType", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<string>("ConnectorType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TokenOptionID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("TokenOptionID");

                    b.ToTable("UserPreferenceTokenConnectorTypes", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.Tokens.UserPreferenceTokenOption", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserPreferencesID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("UserPreferencesID");

                    b.ToTable("UserPreferenceTokens", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.UserPreferences", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<Guid>("GeneralOptionsID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("GeneralOptionsID")
                        .IsUnique();

                    b.ToTable("UserPreferences", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.Addresses.Address", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Country")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DescriptiveNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OrientationNumber")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZIPCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Addresses", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.CountryCodes.CountryCode", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CountryCodes", "App");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.Images.Image", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("Images", "App");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.Resources.Resource", b =>
                {
                    b.Property<string>("ResourceCode")
                        .HasColumnType("text");

                    b.Property<int>("CountryCodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ResourceCode");

                    b.HasIndex("CountryCodeID", "ResourceCode")
                        .HasDatabaseName("IX_Resource_CountryCodeID_ResourceCode");

                    b.ToTable("Resources", "App");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ImageID")
                        .HasColumnType("uuid");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("UserPreferencesID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ImageID")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserPreferencesID")
                        .IsUnique();

                    b.ToTable("Users", "Auth");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.Enum.TaskModuleParameterEnumValueEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<Guid?>("ModuleValueID")
                        .HasColumnType("uuid");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ModuleValueID")
                        .IsUnique();

                    b.ToTable("TaskModuleParameterEnumValues", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.List.TaskModuleParameterListValueEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.HasKey("ID");

                    b.ToTable("TaskModuleParameterListValues", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.List.TaskModuleParameterListValueItemEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<Guid?>("ListParamValueID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("ListParamValueID");

                    b.ToTable("TaskModuleParameterListValueItems", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.TaskModuleParameterEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ListValueID")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModuleID")
                        .HasColumnType("uuid");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ValueID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("ListValueID");

                    b.HasIndex("ModuleID");

                    b.HasIndex("ValueID")
                        .IsUnique();

                    b.ToTable("TaskModuleParameters", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Values.TaskModuleParameterValueEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<bool?>("BoolValue")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("EnumValueID")
                        .HasColumnType("uuid");

                    b.Property<float?>("FloatValue")
                        .HasColumnType("real");

                    b.Property<int?>("IntValue")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ListValueID")
                        .HasColumnType("uuid");

                    b.Property<string>("StringValue")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EnumValueID")
                        .IsUnique();

                    b.HasIndex("ListValueID")
                        .IsUnique();

                    b.ToTable("TaskModuleParameterValues", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.TaskModuleEntity", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<int>("PackageType")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TaskConfigID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("TaskConfigID");

                    b.ToTable("TaskModules", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.RepeatedMessage.TaskConfigRepeatedMessageItem", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RepeatedMessageID")
                        .HasColumnType("uuid");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("RepeatedMessageID");

                    b.ToTable("TaskConfigRepeatedMessageItems", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.TaskConfigRepeatedMessage", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<int>("RepeatedMessageType")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("TaskConfigRepeatedMessages", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.TaskConfig", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid ()");

                    b.Property<bool>("FeedbackFromSolution")
                        .HasColumnType("boolean");

                    b.Property<string>("InitMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MaxContextSize")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RepeatedMessageID")
                        .HasColumnType("uuid");

                    b.Property<string>("SystemMessage")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("RepeatedMessageID")
                        .IsUnique();

                    b.ToTable("TaskConfigurations", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Messages.TaskMessage", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Model")
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("TaskID")
                        .HasColumnType("uuid");

                    b.Property<int?>("Tokens")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("DateCreated")
                        .HasDatabaseName("IX_TaskMessages_DateCreated");

                    b.HasIndex("TaskID");

                    b.ToTable("TaskMessages", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Solutions.TaskSolution", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<float?>("Fitness")
                        .HasColumnType("real");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TaskID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskMessageID")
                        .HasColumnType("uuid");

                    b.HasKey("ID");

                    b.HasIndex("TaskID");

                    b.HasIndex("TaskMessageID")
                        .IsUnique();

                    b.ToTable("TaskSolutions", "Data");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Task", b =>
                {
                    b.Property<Guid>("ID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfigID")
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentIteration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("IterationsInvalidConsecutive")
                        .HasColumnType("integer");

                    b.Property<int>("IterationsValid")
                        .HasColumnType("integer");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("ConfigID")
                        .IsUnique();

                    b.HasIndex("DateCreated")
                        .HasDatabaseName("IX_Task_DateCreated");

                    b.HasIndex("DateUpdated")
                        .HasDatabaseName("IX_Task_DateUpdated");

                    b.HasIndex("IsDeleted")
                        .HasDatabaseName("IX_Task_IsDeleted");

                    b.HasIndex("State")
                        .HasDatabaseName("IX_Task_State");

                    b.HasIndex("IsDeleted", "State")
                        .HasDatabaseName("IX_Task_IsDeleted_State");

                    b.HasIndex("State", "DateCreated")
                        .HasDatabaseName("IX_Task_State_DateCreated");

                    b.ToTable("Tasks", "Data");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ApplicationUserCompany", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Companies.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationUserTask", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("MembersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyTask", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Companies.Company", null)
                        .WithMany()
                        .HasForeignKey("MemberGroupsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Task", null)
                        .WithMany()
                        .HasForeignKey("TasksID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Companies.Company", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Shared.Addresses.Address", "Address")
                        .WithOne()
                        .HasForeignKey("FrontEASE.Domain.Entities.Companies.Company", "AddressID");

                    b.HasOne("FrontEASE.Domain.Entities.Shared.Images.Image", "Image")
                        .WithOne()
                        .HasForeignKey("FrontEASE.Domain.Entities.Companies.Company", "ImageID");

                    b.Navigation("Address");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.Tokens.Connectors.UserPreferenceTokenOptionConnectorType", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Management.Tokens.UserPreferenceTokenOption", "TokenOption")
                        .WithMany("ConnectorTypes")
                        .HasForeignKey("TokenOptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TokenOption");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.Tokens.UserPreferenceTokenOption", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Management.UserPreferences", "UserPreferences")
                        .WithMany("TokenOptions")
                        .HasForeignKey("UserPreferencesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.UserPreferences", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Management.General.UserPreferenceGeneralOptions", "GeneralOptions")
                        .WithOne("UserPreferences")
                        .HasForeignKey("FrontEASE.Domain.Entities.Management.UserPreferences", "GeneralOptionsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralOptions");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.Resources.Resource", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Shared.CountryCodes.CountryCode", "CountryCode")
                        .WithMany("Resources")
                        .HasForeignKey("CountryCodeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryCode");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Shared.Images.Image", "Image")
                        .WithOne()
                        .HasForeignKey("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", "ImageID");

                    b.HasOne("FrontEASE.Domain.Entities.Management.UserPreferences", "UserPreferences")
                        .WithOne("User")
                        .HasForeignKey("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", "UserPreferencesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("UserPreferences");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.Enum.TaskModuleParameterEnumValueEntity", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.TaskModuleEntity", "ModuleValue")
                        .WithOne("ParameterEnumValue")
                        .HasForeignKey("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.Enum.TaskModuleParameterEnumValueEntity", "ModuleValueID");

                    b.Navigation("ModuleValue");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.List.TaskModuleParameterListValueItemEntity", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.List.TaskModuleParameterListValueEntity", "ListParamValue")
                        .WithMany("ParameterValues")
                        .HasForeignKey("ListParamValueID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ListParamValue");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.TaskModuleParameterEntity", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.List.TaskModuleParameterListValueItemEntity", "ListValue")
                        .WithMany("ParameterItems")
                        .HasForeignKey("ListValueID");

                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.TaskModuleEntity", "Module")
                        .WithMany("Parameters")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Values.TaskModuleParameterValueEntity", "Value")
                        .WithOne("Parameter")
                        .HasForeignKey("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.TaskModuleParameterEntity", "ValueID");

                    b.Navigation("ListValue");

                    b.Navigation("Module");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Values.TaskModuleParameterValueEntity", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.Enum.TaskModuleParameterEnumValueEntity", "EnumValue")
                        .WithOne("ParameterValue")
                        .HasForeignKey("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Values.TaskModuleParameterValueEntity", "EnumValueID");

                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.List.TaskModuleParameterListValueEntity", "ListValue")
                        .WithOne("ParameterValue")
                        .HasForeignKey("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Values.TaskModuleParameterValueEntity", "ListValueID");

                    b.Navigation("EnumValue");

                    b.Navigation("ListValue");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.TaskModuleEntity", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.TaskConfig", "TaskConfig")
                        .WithMany("Modules")
                        .HasForeignKey("TaskConfigID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("TaskConfig");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.RepeatedMessage.TaskConfigRepeatedMessageItem", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.TaskConfigRepeatedMessage", "RepeatedMessage")
                        .WithMany("RepeatedMessageItems")
                        .HasForeignKey("RepeatedMessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepeatedMessage");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.TaskConfig", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.Modules.TaskConfigRepeatedMessage", "RepeatedMessage")
                        .WithOne("TaskConfig")
                        .HasForeignKey("FrontEASE.Domain.Entities.Tasks.Configs.TaskConfig", "RepeatedMessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepeatedMessage");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Messages.TaskMessage", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Task", "Task")
                        .WithMany("Messages")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Solutions.TaskSolution", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Task", "Task")
                        .WithMany("Solutions")
                        .HasForeignKey("TaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Messages.TaskMessage", "TaskMessage")
                        .WithOne("TaskSolution")
                        .HasForeignKey("FrontEASE.Domain.Entities.Tasks.Solutions.TaskSolution", "TaskMessageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");

                    b.Navigation("TaskMessage");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Task", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Tasks.Configs.TaskConfig", "Config")
                        .WithOne("Task")
                        .HasForeignKey("FrontEASE.Domain.Entities.Tasks.Task", "ConfigID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Config");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", null)
                        .WithOne("UserRole")
                        .HasForeignKey("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.General.UserPreferenceGeneralOptions", b =>
                {
                    b.Navigation("UserPreferences")
                        .IsRequired();
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.Tokens.UserPreferenceTokenOption", b =>
                {
                    b.Navigation("ConnectorTypes");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Management.UserPreferences", b =>
                {
                    b.Navigation("TokenOptions");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.CountryCodes.CountryCode", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Shared.Users.ApplicationUser", b =>
                {
                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.Enum.TaskModuleParameterEnumValueEntity", b =>
                {
                    b.Navigation("ParameterValue")
                        .IsRequired();
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.List.TaskModuleParameterListValueEntity", b =>
                {
                    b.Navigation("ParameterValue")
                        .IsRequired();

                    b.Navigation("ParameterValues");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Options.List.TaskModuleParameterListValueItemEntity", b =>
                {
                    b.Navigation("ParameterItems");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.Parameters.Values.TaskModuleParameterValueEntity", b =>
                {
                    b.Navigation("Parameter")
                        .IsRequired();
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.Options.TaskModuleEntity", b =>
                {
                    b.Navigation("ParameterEnumValue")
                        .IsRequired();

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.Modules.TaskConfigRepeatedMessage", b =>
                {
                    b.Navigation("RepeatedMessageItems");

                    b.Navigation("TaskConfig")
                        .IsRequired();
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Configs.TaskConfig", b =>
                {
                    b.Navigation("Modules");

                    b.Navigation("Task")
                        .IsRequired();
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Messages.TaskMessage", b =>
                {
                    b.Navigation("TaskSolution");
                });

            modelBuilder.Entity("FrontEASE.Domain.Entities.Tasks.Task", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Solutions");
                });
#pragma warning restore 612, 618
        }
    }
}
