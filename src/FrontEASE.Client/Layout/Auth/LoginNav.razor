@inject IResourceHandler resourceHandler
@inject IUIManager uiManager
@inject NavigationManager navManager
@inject AuthenticationStateProvider provider
@inject AppSettings appSettings

@inherits LayoutComponentBase

<AuthorizeView>
    <Authorized>
        @if (LoggedUser.Id is not null)
        {
            <Dropdown RightAligned Class="navbar-dropdown-menu">
                <DropdownToggle Padding="Padding.Is3.FromStart.Is3.FromEnd" Class="nav-link nav-link-custom" ElementId="navbar-login-toggle">
                    <Container Class="d-flex align-items-center justify-content-center">
                        <Row Display="Display.Flex" Class="align-items-center justify-content-center">
                            <Column ColumnSize="ColumnSize.Is2.OnWidescreen" Padding="Padding.Is0" Display="Display.Flex" Class="align-items-center justify-content-center">
                                <Image Border="Border.Is1.RoundedCircle"
                                       Source="@(string.IsNullOrWhiteSpace(LoggedUser.Image?.ImageUrl) ? ImageConstants.UserPicDefault : $"{appSettings.ApiSettings!.BaseUrl}/{LoggedUser.Image?.ImageUrl}")"
                                       Class="full-max-width datagrid-item-image-extrasmall" Loading />
                            </Column>
                            <Column ColumnSize="ColumnSize.Is8.OnWidescreen" Display="Display.None.InlineBlock.OnWidescreen" Class="align-items-center justify-content-center">
                                <Text TextWeight=TextWeight.Bold>@LoggedUser.UserName</Text>
                                <Text TextSize="TextSize.Small">@LoggedUser.Email</Text>
                            </Column>
                        </Row>
                    </Container>
                </DropdownToggle>
                <DropdownMenu Background="Background.Primary" Class="navbar-dropdown-menu">
                    <DropdownItem Class="navbar-dropdown-item" Padding="Padding.Is0" TextAlignment="TextAlignment.Center">
                        <BarLink TextWeight="TextWeight.Bold" Margin="Margin.Is1.FromStart.Is1.FromEnd" @onclick="Logout" Match="Match.All" Class="navbar-link-big nav-link-custom">Logout</BarLink>
                    </DropdownItem>
                </DropdownMenu>
            </Dropdown>
        }
    </Authorized>

    <NotAuthorized>
        <BarLink To="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Specific}.{UIElementConstants.Route}.{UIRouteConstants.AccountRoute}.{UIRouteConstants.LoginRoute}"))" Class="nav-link" Match="Match.All">
            @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Login}"))
        </BarLink>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    public ApplicationUserDto LoggedUser { get; set; } = new();

    private void Logout()
    {
        var authStateProvider = (CustomAuthenticationStateProvider)provider;
        authStateProvider.Logout();

        var loginRoute = resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Specific}.{UIElementConstants.Route}.{UIRouteConstants.AccountRoute}.{UIRouteConstants.LoginRoute}");
        uiManager.ChangeTheme(ThemeDefaults.GetThemeDefaults(ColorScheme.LIGHT));
        navManager.NavigateTo(loginRoute);
    }
}