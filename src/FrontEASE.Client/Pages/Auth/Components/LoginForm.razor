@inject IJSRuntime jsRuntime
@inject IResourceHandler resourceHandler
@inject IUserApiService userApiService
@inject IUIService uiService
@inject IManagementApiService managementApiService
@inject IMapper mapper
@inject Blazored.Toast.Services.IToastService toastService

@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<Form Margin="Margin.Is4.FromTop" Class="text-form-size" @onkeydown="HandleKeyDown">
    <Validations @ref="Validations" Mode="ValidationMode.Auto" Model="LoginModel" ValidateOnLoad="false">
        <Fields>
            <Validation>
                <Field ColumnSize="ColumnSize.IsFull">
                    <FieldLabel For="@(GetElementIdByOperation(nameof(LoginDto.Username)))" RequiredIndicator>
                        @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.Username), PropertyDisplayResourceType.FIELD)))
                    </FieldLabel>
                    <TextEdit ElementId="@(GetElementIdByOperation(nameof(LoginDto.Username)))"
                              Role="TextRole.Text"
                              Placeholder="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.Username), PropertyDisplayResourceType.PLACEHOLDER)))"
                              @bind-Text="@LoginModel.Username">
                        <Feedback>
                            <ValidationError Multiline="true" />
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>

            <Validation>
                <Field ColumnSize="ColumnSize.IsFull">
                    <FieldLabel For="@(GetElementIdByOperation(nameof(LoginDto.Password)))" RequiredIndicator>
                        @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.Password), PropertyDisplayResourceType.FIELD)))
                    </FieldLabel>
                    <TextEdit ElementId="@(GetElementIdByOperation(nameof(LoginDto.Password)))"
                              Role="TextRole.Password"
                              Placeholder="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<LoginDto>(nameof(LoginDto.Password), PropertyDisplayResourceType.PLACEHOLDER)))"
                              @bind-Text="@LoginModel.Password">
                        <Feedback>
                            <ValidationError Multiline="true" />
                        </Feedback>
                    </TextEdit>
                </Field>
            </Validation>

            <Field ColumnSize="ColumnSize.Is4.OnWidescreen.Is8.WithOffset.OnWidescreen" Margin="Margin.Is5.FromTop">
                <Button TextWeight="TextWeight.Bold" Color="Color.Primary" Clicked="Login" Class="full-width" Disabled="@(loginInProgress)">
                    @if (loginInProgress)
                    {
                        <SpinnerButton SmallControlSpinner="true" TextSize="TextSize.Large" DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Login}")}")" />
                    }
                    else
                    {
                        @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Login}"))
                    }
                </Button>
            </Field>
        </Fields>

    </Validations>
</Form>

@code {
    [CascadingParameter]
    public ApplicationUserDto LoggedUser { get; set; } = new();

    [CascadingParameter]
    private UserPreferencesDto Options { get; set; } = new();

    private bool loginInProgress;
    private DataOperation operation = DataOperation.READ;

    private LoginDto LoginModel = new();
    private Validations Validations = new();

    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<LoginDto>(elementBase, operation, null);

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (ShortcutKeyDictionary.GetEnumForm(e.Key))
        {
            case ShortcutKeys.ENTER:
                await Login();
                break;
            default:
                break;
        }
    }

    private async Task Login()
    {
        loginInProgress = true;

        if (await Validations.ValidateAll())
        {
            var authenticationStateProvider = (CustomAuthenticationStateProvider)authStateProvider!;
            var loginResult = await authenticationStateProvider.LoginAsync(LoginModel.Username, LoginModel.Password);
            if (loginResult.Success)
            {
                var homeRoute = resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Specific}.{UIElementConstants.Route}.{UIRouteConstants.TasksRoute}");
                await LoadUserData();
                navManager.NavigateTo(homeRoute);
            }
            else
            {
                foreach (var errorMessage in loginResult.Errors)
                {
                    toastService.ShowError(errorMessage);
                }
            }
        }

        loginInProgress = false;
    }

    private async Task LoadUserData()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var loggedInUser = await userApiService.LoadUser();
            if (loggedInUser is not null)
            {
                mapper.Map(loggedInUser, LoggedUser);
            }

            await uiService.AssureResourcesInitialized(true);

            var options = await managementApiService.LoadPreferences();
            if (options is not null)
            {
                mapper.Map(options, Options);
            }
        }
    }
}