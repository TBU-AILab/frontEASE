@inject IResourceHandler resourceHandler
@inject AppSettings appSettings

<Column ColumnSize="ColumnSize.Is12" Padding="Padding.Is2.FromStart.Is2.FromEnd" Margin="Margin.Is2.FromTop.Is2.FromBottom">
    <Container Fluid Padding="Padding.Is2" Shadow="Shadow.Small" Border="Border.Is2.Rounded">
        <Row>
            <Column ColumnSize="ColumnSize.Is1.OnWidescreen.Is2.OnTablet" TextAlignment="TextAlignment.Center" Class="align-self-center">
                <Image Border="Border.RoundedCircle" Source="@(string.IsNullOrWhiteSpace(Company.Image?.ImageUrl) ? @"\resources\images\companies\companyLogoMissing.png" : $"{appSettings.ApiSettings!.BaseUrl}/{Company.Image.ImageUrl}")" Class="full-max-width datagrid-item-image" Loading />
            </Column>
            <Column ColumnSize="ColumnSize.Is11.OnWidescreen.Is10.OnTablet">
                <Container Fluid>
                    <Row Margin="Margin.Is2.FromTop" Class="justify-content-center">
                        <Column ColumnSize="ColumnSize.Is10.OnWidescreen" TextAlignment="TextAlignment.Center" Class="align-self-center">
                            <Heading Size="HeadingSize.Is5" TextColor="TextColor.Primary" TextWeight="TextWeight.Bold" Margin="Margin.Is0">
                                @(!string.IsNullOrWhiteSpace(Company.NameAbbreviation) ? $"{Company.NameAbbreviation} - {Company.Name}" : Company.Name)
                            </Heading>
                        </Column>
                        <Column Display="Display.None.InlineBlock.OnWidescreen" ColumnSize="ColumnSize.Is2.OnWidescreen" TextAlignment="TextAlignment.End" Class="align-self-center">
                            <Icon Class="action-icon action-icon-info" Name="IconName.Pen" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => ShowEditModal())" />
                            <Icon Class="action-icon action-icon-danger" Name="IconName.Delete" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => ShowDeleteModal())" />
                        </Column>
                        <Column Display="Display.None.OnWidescreen" ColumnSize="ColumnSize.Is2.OnWidescreen" TextAlignment="TextAlignment.Center" Class="align-self-center">
                            <Icon Class="action-icon action-icon-info" Name="IconName.Pen" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => ShowEditModal())" />
                            <Icon Class="action-icon action-icon-danger" Name="IconName.Delete" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => ShowDeleteModal())" />
                        </Column>
                    </Row>
                    @if (Company.Address is not null)
                    {
                        <Row Margin="Margin.Is2.FromTop">
                            <Column ColumnSize="ColumnSize.Is10.OnWidescreen" TextAlignment="TextAlignment.Center">
                                <Span TextColor="TextColor.Black50" Class="font-large">
                                    @($"{Company.Address.Street} {Company.Address.DescriptiveNumber}")
                                </Span>
                                @if (!string.IsNullOrEmpty(Company.Address.OrientationNumber))
                                {
                                    <Span TextColor="TextColor.Black50" Class="font-large">
                                        @($" ({Company.Address.OrientationNumber})")
                                    </Span>
                                }
                                <Span TextColor="TextColor.Black50" Class="font-large">
                                    @($", {Company.Address.ZIPCode} {Company.Address.City} - {resourceHandler.GetResource(((Country)Company.Address.Country).GetEnumResourceValue())}")
                                </Span>
                            </Column>
                        </Row>
                    }
                </Container>
            </Column>
        </Row>
    </Container>
</Column>

<CompanyEditModal @ref="@editModal"></CompanyEditModal>
<CompanyDeleteModal @ref="@deleteModal"></CompanyDeleteModal>

@code {
    [CascadingParameter]
    public CompanyDto Company { get; set; } = new();

    private CompanyEditModal editModal = new();
    private CompanyDeleteModal deleteModal = new();

    private Task ShowEditModal() => editModal.ShowModal();
    private Task ShowDeleteModal() => deleteModal.ShowModal();
}