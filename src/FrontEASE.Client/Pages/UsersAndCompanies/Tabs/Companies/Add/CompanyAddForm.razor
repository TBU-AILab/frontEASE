@inject ICompanyApiService companyApiService
@inject IUIService uiService
@inject ICompanyManipulationService companyManipulationService
@inject IResourceHandler resourceHandler
@inject IMapper mapper
@inject IUIManager uiManager
@inject Blazored.Toast.Services.IToastService toastService

<Row Background="@uiManager.Theme.BackgroundOptions.Primary" Class="rounded">
    <Column ColumnSize="ColumnSize.Is12" Margin="Margin.Is2.FromBottom" Padding="Padding.Is0">
        <Icon Name="@(isFormCollapsed ? IconName.PlusCircle : IconName.MinusCircle)" IconSize="IconSize.x2" IconStyle="IconStyle.Solid" @onclick="@ChangeCollapseState" Class="float-right main-action-icon main-action-icon-primary" />
    </Column>

    <Column ColumnSize="ColumnSize.Is12" Display="@(isFormCollapsed ? Display.None : Display.Block)" Margin="Margin.Is2.FromTop.Is4.FromBottom">
        <Form Margin="Margin.Is4.FromTop" Class="text-form-size" @onkeydown="@(async (e) => await HandleKeyDown(e))">
            <Validations @ref="Validations" Mode="ValidationMode.Manual" Model="CompanyModel">

                <CascadingValue Value="CompanyModel">
                    <CompanyDataFormSection Operation="DataOperation.INSERT" FullWidthFields="false" />
                    <AddressDataFormSection Operation="DataOperation.INSERT" FullWidthFields="false" />
                </CascadingValue>

                <Fields>
                    <Field ColumnSize="ColumnSize.Is3.OnWidescreen" Margin="Margin.IsAuto.FromStart.Is5.FromTop">
                        <Button Color="Color.Success" Clicked="@InsertCompany" Class="btn button btn-sized full-width" Disabled="@savingInProgress" TextWeight="TextWeight.Bold">
                            @if (savingInProgress)
                            {
                                <SpinnerButton DisplayText="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Save}"))" SmallControlSpinner="true" TextSize="TextSize.Medium" />
                            }
                            else
                            {
                                @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Save}"))
                            }
                        </Button>
                    </Field>
                </Fields>

            </Validations>
        </Form>
    </Column>
</Row>

@code {

    [CascadingParameter]
    public IList<CompanyDto> Companies { get; set; } = [];

    private CompanyDto CompanyModel = new();
    private Validations Validations = new();

    private bool isFormCollapsed = true;
    private bool savingInProgress = false;

    public async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (ShortcutKeyDictionary.GetEnumForm(e.Key))
        {
            case ShortcutKeys.ENTER:
                await InsertCompany();
                break;
            default:
                break;
        }
    }

    public async Task InsertCompany()
    {
        savingInProgress = true;

        if (await Validations.ValidateAll())
        {
            var company = await companyApiService.AddCompany(CompanyModel);
            if (company is not null)
            {
                Companies.Insert(0, company);
                var message = $"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Result}.{UIStateConstants.ActionSuccess}")} - {resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Save}")}: {CompanyModel.Name}{(string.IsNullOrWhiteSpace(CompanyModel.NameAbbreviation) ? string.Empty : $" ({CompanyModel.NameAbbreviation})")}";
                toastService.ShowSuccess(message);

                companyManipulationService.ReinitializeModel(CompanyModel);
            }
        }

        savingInProgress = false;
        await uiService.CallRequestRefreshAsync();
    }

    private void ChangeCollapseState() => isFormCollapsed = !isFormCollapsed;
}