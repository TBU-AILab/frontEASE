@inject IResourceHandler resourceHandler
@inject IUserApiService userApiService
@inject IUIService uiService
@inject IUIManager uiManager

<FormSectionHeader DisplayText="@(resourceHandler.GetResource(AttributeExtensions.GetCollectionResourceValue<ApplicationUserDto>()))" />
<Divider Class="divider-main bg-custom-light" Shadow="Shadow.Small" Style="@($"height: 2px !important;")" Margin="Margin.Is0.FromTop" />

@if (isUsersLoading)
{
    <ContentLoadSpinner />
}
else
{
    <Row Margin="Margin.Is2.FromTop">
        @if (Users.Count > 0)
        {
            @foreach (var User in Users)
            {
                <CascadingValue Value="User">
                    <UserListItem />
                </CascadingValue>
            }
        }
        else
        {
            <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromTop.Is3.FromBottom">
                <Heading Size="HeadingSize.Is4" TextWeight="TextWeight.Bold" Class="text-custom-primary">
                    @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Error}.{HttpStatusCode.NotFound}.{nameof(ApplicationUserDto)}.{UIElementConstants.Collection}"))
                </Heading>
            </Column>
        }
    </Row>
}

@code {
    [CascadingParameter]
    public IList<ApplicationUserDto> Users { get; set; } = [];

    private bool isUsersLoading = false;
    private bool isInitialized = false;

    private void RefreshView()
    { StateHasChanged(); }

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshView;
        if (!isInitialized && !(Users?.Count > 0 == true))
        {
            isUsersLoading = true;
            await LoadUsers();
            isUsersLoading = false;
        }
        await base.OnInitializedAsync();
        isInitialized = true;
    }

    private async Task LoadUsers()
    {
        var users = await userApiService.LoadUsers();
        if (users?.Count > 0 == true)
        {
            Users.Clear();
            foreach (var user in users) { Users.Add(user); }
        }
    }
}