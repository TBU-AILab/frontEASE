@inject IResourceHandler resourceHandler
@inject ITypelistApiService typelistApiService
@inject IManagementApiService managementApiService
@inject IUIService uiService
@inject IMapper mapper
@inject IUIManager uiManager

<FormSectionHeader DisplayText="@(resourceHandler.GetResource(AttributeExtensions.GetCollectionResourceValue<UserPreferenceTokenOptionDto>()))" />
<Divider Class="divider-main bg-custom-light" Shadow="Shadow.Small" Style="@($"height: 2px !important;")" Margin="Margin.Is0.FromTop" />

@if (!isInitialized)
{
    <ContentLoadSpinner />
}
else
{
    <Row Margin="Margin.Is2.FromTop">
        @if (Options.TokenOptions.Count > 0)
        {
            @foreach (var Token in Options.TokenOptions.OrderBy(x => x.Priority))
            {
                <CascadingValue Value="Token">
                    <TokenListItem />
                </CascadingValue>
            }

        }
        else
        {
            <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromTop.Is3.FromBottom">
                <Heading Size="HeadingSize.Is4" TextWeight="TextWeight.Bold">
                    @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Error}.{HttpStatusCode.NotFound}.{nameof(UserPreferenceTokenOptionDto)}.{UIElementConstants.Collection}"))
                </Heading>
            </Column>
        }
    </Row>
}

@code {
    [CascadingParameter]
    public UserPreferencesDto Options { get; set; } = new();

    [CascadingParameter]
    public IList<TaskModuleNoValidationDto> ConnectorTypes { get; set; } = [];

    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshView;
        if (!isInitialized)
        {
            var loadTypelistsTask = Task.CompletedTask;
            var loadPreferencesTask = Task.CompletedTask;

            if (!(ConnectorTypes?.Any() == true))
            {
                loadTypelistsTask = LoadTypelists();
            }

            loadPreferencesTask = LoadPreferences();

            await Task.WhenAll(loadTypelistsTask, loadPreferencesTask);
        }
        await base.OnInitializedAsync();
        isInitialized = true;
    }

    private void RefreshView()
    { StateHasChanged(); }

    private async Task LoadPreferences()
    {
        var preferences = await managementApiService.LoadPreferences();
        if (preferences is not null)
        {
            mapper.Map(preferences, Options);
        }
    }

    private async Task LoadTypelists()
    {
        var connectorTypes = await typelistApiService.LoadTaskModuleOptions();
        ConnectorTypes.Clear();
        foreach (var type in connectorTypes)
        {
            if (type.PackageType == ModuleType.LLM_CONNECTOR)
            {
                ConnectorTypes.Add(type);
            }
        }
    }
}
