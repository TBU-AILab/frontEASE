@inject IResourceHandler resourceHandler
@inject IUIManager uiManager

<Column Margin="Margin.Is3.FromBottom" ColumnSize="ColumnSize.Is12">
    <Container Fluid Padding="Padding.Is2" Shadow="Shadow.Small" Border="Border.Rounded" Style="@($"background-color: {uiManager.Theme.BackgroundOptions.Secondary};")">

        <Row Margin="Margin.Is2.FromTop" Class="justify-content-center text-break">
            <Column TextAlignment="TextAlignment.Center" Class="align-self-center ">
                <Heading Size="HeadingSize.Is5" TextWeight="TextWeight.Bold" Margin="Margin.Is0">
                    @($"{Token.Name} ({GetTokenLongName() ?? string.Join(", ", Token.ConnectorTypes.Select(x => x.ConnectorType))})")
                </Heading>
                @if (!string.IsNullOrWhiteSpace(Token.Description))
                {
                    <Row Margin="Margin.Is2.FromTop" Class="text-break">
                        <Column TextAlignment="TextAlignment.Center">
                            <Span Class="font-large" TextOverflow="TextOverflow.Wrap" Style="@($"color: {uiManager.Theme.TextColorOptions.Primary};")">
                                @Token.Description
                            </Span>
                        </Column>
                    </Row>
                }
            </Column>
            <Column ColumnSize="ColumnSize.Is2.OnWidescreen">
                <Column Display="Display.None.InlineBlock.OnWidescreen" ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.End" Class="align-self-center">
                    <Icon Class="action-icon action-icon-info" Name="IconName.Pen" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => ShowEditModal())" />
                    <Icon Class="action-icon action-icon-danger" Name="IconName.Delete" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => ShowDeleteModal())" />
                </Column>
                <Column Display="Display.None.OnWidescreen" ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center" Class="align-self-center">
                    <Icon Class="action-icon action-icon-info" Name="IconName.Pen" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => ShowEditModal())" />
                    <Icon Class="action-icon action-icon-danger" Name="IconName.Delete" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => ShowDeleteModal())" />
                </Column>
            </Column>
        </Row>

    </Container>
</Column>

<TokenEditModal @ref="@editModal"></TokenEditModal>
<TokenDeleteModal @ref="@deleteModal"></TokenDeleteModal>

@code {
    [CascadingParameter]
    public UserPreferenceTokenOptionDto Token { get; set; } = new();

    [CascadingParameter]
    public IList<TaskModuleNoValidationDto> ConnectorTypes { get; set; } = [];

    private TokenEditModal editModal = new();
    private TokenDeleteModal deleteModal = new();

    private Task ShowEditModal() => editModal.ShowModal();
    private Task ShowDeleteModal() => deleteModal.ShowModal();

    private string? GetTokenLongName()
    {
        var tokenConnectorTypes = Token.ConnectorTypes.Select(x => x.ConnectorType);
        var matchingModules = ConnectorTypes.Where(x => tokenConnectorTypes.Contains(x.ShortName));

        return matchingModules.Any() ? string.Join(", ", matchingModules.Select(x => x.LongName)) : null;
    }
}