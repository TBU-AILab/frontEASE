@inject IManagementApiService managementApiService
@inject IUIService uiService
@inject IUIManager uiManager
@inject IResourceHandler resourceHandler
@inject IMapper mapper
@inject Blazored.Toast.Services.IToastService toastService

<Modal @ref="@EditModal" @bind-Visible="@isModalVisible" Class="modal-dialog-wide" Border="Border.Rounded" @onkeydown="HandleKeyDown">
    @if (EditModal.Visible)
    {
        <ModalContent Centered Shadow="Shadow.Small" Class="bg-custom-primary">

            <GenericModalHeader DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Update}")} - {Token.Name}")"/>

            <ModalBody Border="Border.Rounded">
                <Row Margin="Margin.Is3" Padding="Margin.Is3.FromStart.Is3.FromEnd" Border="Border.Rounded" Class="user-modal-form">
                    <Column ColumnSize="ColumnSize.IsFull">
                        <Form>
                            <Validations @ref="Validations" Mode="ValidationMode.Auto" Model="@TokenModel" ValidateOnLoad="false">
                                <CascadingValue Value="TokenModel">
                                    <TokenDataFormSection Operation="DataOperation.UPDATE" FullWidthFields="true" />
                                    <Fields>
                                        <Field ColumnSize="ColumnSize.Is3.OnWidescreen" Margin="Margin.IsAuto.FromStart.Is5.FromTop">
                                            <Button Clicked="@EditToken" Class="btn button btn-sized full-width bg-custom-info text-custom-info" Disabled="@updateInProgress" TextWeight="TextWeight.Bold">
                                                @if (updateInProgress)
                                                {
                                                    <SpinnerButton DisplayText="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Save}"))" SmallControlSpinner="true" TextSize="TextSize.Medium" />
                                                }
                                                else
                                                {
                                                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Save}"))
                                                }
                                            </Button>
                                        </Field>
                                    </Fields>
                                </CascadingValue>
                            </Validations>
                        </Form>
                    </Column>
                </Row>
            </ModalBody>
        </ModalContent>
    }
</Modal>

@code {
    [CascadingParameter]
    public UserPreferencesDto Options { get; set; } = new();

    [CascadingParameter]
    public UserPreferenceTokenOptionDto Token { get; set; } = new();

    private UserPreferenceTokenOptionDto TokenModel = new();
    private Modal EditModal = new();
    private Validations Validations = new();

    private bool updateInProgress = false;
    private bool isModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshView;
        await base.OnInitializedAsync();
    }

    private void RefreshView()
    { StateHasChanged(); }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (ShortcutKeyDictionary.GetEnumForm(e.Key))
        {
            case ShortcutKeys.ENTER:
                await EditToken();
                break;
            case ShortcutKeys.ESCAPE:
                await HideModal();
                break;
            default:
                break;
        }
    }

    public async Task EditToken()
    {
        updateInProgress = true;

        if (await Validations.ValidateAll())
        {
            mapper.Map(TokenModel, Token);
            Options.TokenOptions.Remove(Token);
            Options.TokenOptions.Insert(0, Token);

            var editedPreferences = await managementApiService.UpdatePreferences(Options);

            if (editedPreferences is not null)
            {
                mapper.Map(editedPreferences, Options);
                var message = $"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Result}.{UIStateConstants.ActionSuccess}")} - {resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Update}")}: {string.Join(", ", TokenModel.ConnectorTypes.Select(x => x.ConnectorType))} ({new string(Token.Token.Take(3).ToArray())} ... {new string(Token.Token.TakeLast(3).ToArray())})";
                toastService.ShowSuccess(message);

                await HideModal();
            }
        }

        updateInProgress = false;
        uiService.CallRequestRefresh();
    }

    private Task HideModal()
    {
        isModalVisible = false;
        return EditModal.Hide();
    }

    public Task ShowModal()
    {
        TokenModel = mapper.Map<UserPreferenceTokenOptionDto>(Token);
        isModalVisible = true;
        return EditModal.Show();
    }
}