@inject IResourceHandler resourceHandler
@inject IUIManager uiManager
@inject IUIService uiService
@inject IMapper mapper
@inject IManagementApiService managementApiService

<FormSectionHeader DisplayText="@(resourceHandler.GetResource(AttributeExtensions.GetCollectionResourceValue<GlobalPreferenceCorePackageDto>()))" />
<Divider Class="divider-main" Shadow="Shadow.Small" Style="@($"height: 2px !important; background-color: {uiManager.Theme.BackgroundOptions.Light};")" Margin="Margin.Is0.FromTop" />


@if (!isInitialized)
{
    <ContentLoadSpinner />
}
else
{
    <Row Margin="Margin.Is2.FromTop">
        @if (GlobalPreferences.CorePackages.Where(x => !x.System).Any())
        {
            <Container Fluid Padding="Padding.Is0" Margin="Margin.Is3.FromTop" Border="Border.Is1.Rounded" Style="@($"border-color: {uiManager.Theme.BackgroundOptions.Light} !important;")" Shadow="Shadow.Small">
                <Column ColumnSize="ColumnSize.Is12" Display="Display.Flex" Class="justify-content-between align-items-center cursor-pointer" @onclick="@ChangeCollapseStateAddons" Padding="Padding.Is2">
                    <Div Display="Display.Flex" Width="Width.Is100" Class="justify-content-center">
                        <Text TextWeight="TextWeight.Bold" Class="text-center">
                            @(resourceHandler.GetResource($"{AttributeExtensions.GetResourceFieldValue<GlobalPreferencesDto>(nameof(GlobalPreferencesDto.CorePackages), PropertyDisplayResourceType.FIELD)}.{ManagementMetadataConstants.Addons}"))
                        </Text>
                    </Div>
                    <Icon Name="@(!isAddonsPackagesCollapsed ? IconName.AngleUp : IconName.AngleDown)" Style="@($"color: {uiManager.Theme.TextColorOptions.Primary};")" IconSize="IconSize.x2" IconStyle="IconStyle.Solid" />
                </Column>

                @if (!isAddonsPackagesCollapsed)
                {
                    <Column ColumnSize="ColumnSize.IsFull">
                        <Row>
                            @if (!GlobalPreferences.CorePackages.Any(x => !x.System))
                            {
                                <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromTop.Is3.FromBottom">
                                    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">
                                        @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Error}.{HttpStatusCode.NotFound}.{nameof(GlobalPreferenceCorePackageDto)}.{ManagementMetadataConstants.System}.{UIElementConstants.Collection}"))
                                    </Heading>
                                </Column>
                            }
                            else
                            {
                                @foreach (var Package in GlobalPreferences.CorePackages.Where(x => !x.System))
                                {
                                    <Column ColumnSize="ColumnSize.Is3.OnWidescreen.Is4.OnTablet">
                                        <CascadingValue Value="@Package">
                                            <CorePackageListItem />
                                        </CascadingValue>
                                    </Column>
                                }
                            }
                        </Row>
                    </Column>
                }
            </Container>
        }

        <Container Fluid Padding="Padding.Is0" Margin="Margin.Is3.FromTop" Border="Border.Is1.Rounded" Style="@($"border-color: {uiManager.Theme.BackgroundOptions.Light} !important;")" Shadow="Shadow.Small">
            <Column ColumnSize="ColumnSize.Is12" Display="Display.Flex" Class="justify-content-between align-items-center cursor-pointer" @onclick="@ChangeCollapseStateSystem" Padding="Padding.Is2">
                <Div Display="Display.Flex" Width="Width.Is100" Class="justify-content-center">
                    <Text TextWeight="TextWeight.Bold" Class="text-center">
                        @(resourceHandler.GetResource($"{AttributeExtensions.GetResourceFieldValue<GlobalPreferencesDto>(nameof(GlobalPreferencesDto.CorePackages), PropertyDisplayResourceType.FIELD)}.{ManagementMetadataConstants.System}"))
                    </Text>
                </Div>
                <Icon Name="@(!isSystemPackagesCollapsed ? IconName.AngleUp : IconName.AngleDown)" Style="@($"color: {uiManager.Theme.TextColorOptions.Primary};")" IconSize="IconSize.x2" IconStyle="IconStyle.Solid" />
            </Column>

            @if (!isSystemPackagesCollapsed)
            {
                <Column ColumnSize="ColumnSize.IsFull">
                    <Row>
                        @if (!GlobalPreferences.CorePackages.Any(x => x.System))
                        {
                            <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromTop.Is3.FromBottom">
                                <Heading Size="HeadingSize.Is4" TextWeight="TextWeight.Bold">
                                    @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Error}.{HttpStatusCode.NotFound}.{nameof(GlobalPreferenceCorePackageDto)}.{ManagementMetadataConstants.System}.{UIElementConstants.Collection}"))
                                </Heading>
                            </Column>
                        }
                        else
                        {
                            @foreach (var Package in GlobalPreferences.CorePackages.Where(x => x.System))
                            {
                                <Column ColumnSize="ColumnSize.Is3.OnWidescreen.Is4.OnTablet">
                                    <CascadingValue Value="@Package">
                                        <CorePackageListItem />
                                    </CascadingValue>
                                </Column>
                            }
                        }
                    </Row>
                </Column>
            }
        </Container>
    </Row>
}

@code {
    [CascadingParameter]
    public GlobalPreferencesDto GlobalPreferences { get; set; } = new();

    [Parameter]
    public DataOperation Operation { get; set; }

    [Parameter]
    public bool FullWidthFields { get; set; }

    private bool isInitialized = false;
    private bool isPreferencesLoading;
    private bool isSystemPackagesCollapsed;
    private bool isAddonsPackagesCollapsed;

    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<GlobalPreferencesDto>(elementBase, Operation, null);

    private void ChangeCollapseStateSystem() => isSystemPackagesCollapsed = !isSystemPackagesCollapsed;
    private void ChangeCollapseStateAddons() => isAddonsPackagesCollapsed = !isAddonsPackagesCollapsed;

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshView;
        if (!isInitialized)
        {
            var loadPreferencesTask = Task.CompletedTask;
            isPreferencesLoading = true;
            loadPreferencesTask = LoadGlobalPreferences();

            await Task.WhenAll(loadPreferencesTask);
            isPreferencesLoading = false;
        }
        await base.OnInitializedAsync();
        isInitialized = true;

        isSystemPackagesCollapsed = true;
        isAddonsPackagesCollapsed = false;
    }

    private void RefreshView()
    { StateHasChanged(); }

    private async Task LoadGlobalPreferences()
    {
        var preferences = await managementApiService.LoadGlobalPreferences();
        if (preferences is not null)
        {
            mapper.Map(preferences, GlobalPreferences);
        }
    }
}