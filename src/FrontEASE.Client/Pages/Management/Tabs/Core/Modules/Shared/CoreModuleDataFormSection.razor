@inject IResourceHandler resourceHandler
@inject IDataLoader dataLoader
@inject IUIService uiService
@inject IUIManager uiManager

<Fields>
    <Field ColumnSize="ColumnSize.IsFull">
        <FieldLabel For="@(GetElementIdByOperation(nameof(FileDto.Content)))" RequiredIndicator>
            @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<GlobalPreferenceCoreModuleDto>(nameof(GlobalPreferenceCoreModuleDto.Files), PropertyDisplayResourceType.FIELD)))
        </FieldLabel>
        @if (fileLoadInProgress)
        {
            <Column ColumnSize="ColumnSize.Is12" TextAlignment="TextAlignment.Center">
                <SpinnerButton DisplayText="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Load}"))" SmallControlSpinner="true" TextColor="TextColor.Dark" TextSize="TextSize.Medium" />
            </Column>
        }
        <Label For="@(GetElementIdByOperation(nameof(FileDto.Content)))" Display="@(fileLoadInProgress ? Display.None : Display.Block)" Cursor="@(fileLoadInProgress ? Cursor.Default : Cursor.Pointer)" Border="Border.Is1.Rounded" Class="button btn btn-sized btn-custom-file-picker" Overflow="Overflow.Auto" Margin="Margin.Is0.FromBottom">
            <Text Display="Display.InlineBlock" Overflow="Overflow.Hidden" Width="Width.Is100" TextAlignment="TextAlignment.Start" TextWeight="TextWeight.Normal" TextSize="TextSize.Small" Class="@($"{(ModuleModel.Files.Count > 0 ? "text-custom-muted" : "text-custom-primary")}")">
                @(!(ModuleModel.Files.Count > 0) ? resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<FileDto>(nameof(FileDto.Content), PropertyDisplayResourceType.PLACEHOLDER)) : string.Join(", ", ModuleModel.Files.Select(x => x.Name)))
            </Text>
            <FileEdit Display="Display.None"
                      @ref="@filePicker"
                      Filter=".py, .zip"
                      AutoReset="false"
                      ElementId="@(GetElementIdByOperation(nameof(FileDto.Content)))"
                      MaxFileSize="@(SizeConstants.FiveMegabytes)"
                      Changed="args => FileLoaded(args)"
                      Multiple="true"
                      Placeholder="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<FileDto>(nameof(FileDto.Content), PropertyDisplayResourceType.PLACEHOLDER)))" />
        </Label>
    </Field>
</Fields>

@code {
    [CascadingParameter]
    public GlobalPreferenceCoreModuleDto ModuleModel { get; set; } = new();

    [Parameter]
    public DataOperation Operation { get; set; }

    [Parameter]
    public bool FullWidthFields { get; set; }

    private bool fileLoadInProgress;
    private FileEdit filePicker = new();

    public async Task FileLoaded(FileChangedEventArgs args)
    {
        fileLoadInProgress = true;
        try
        {
            await dataLoader.LoadFiles(args, ModuleModel.Files);
            await uiService.CallRequestRefreshAsync();
        }
        catch (Exception)
        {
            var message = $"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Result}.{UIStateConstants.ActionFail}")} - {resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Load}")}: {args.Files?.FirstOrDefault()?.Name}";
        }
        fileLoadInProgress = false;
        await uiService.CallRequestRefreshAsync();
    }

    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<GlobalPreferenceCorePackageDto>(elementBase, Operation, null);
}