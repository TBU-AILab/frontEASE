@inject ITypelistApiService typelistApiService
@inject IResourceHandler resourceHandler
@inject IUIManager uiManager
@inject IUIService uiService

<FormSectionHeader DisplayText="@(resourceHandler.GetResource(AttributeExtensions.GetCollectionResourceValue<GlobalPreferenceCoreModuleDto>()))" />
<Divider Class="divider-main bg-custom-light" Shadow="Shadow.Small" Style="@($"height: 2px !important;")" Margin="Margin.Is0.FromTop" />


@if (!isInitialized)
{
    <ContentLoadSpinner />
}
else
{
    <Row Margin="Margin.Is2.FromTop.Is0.FromStart.Is0.FromEnd">
        @if (TaskModules.Count > 0)
        {
            @foreach (var Module in TaskModules.OrderBy(x => x.PackageType))
            {
                <Column ColumnSize="ColumnSize.Is3.OnWidescreen.Is4.OnTablet">
                    <CascadingValue Value="@Module" >
                        <CoreModuleListItem/>
                    </CascadingValue>
                </Column>
            }
        }
        else
        {
            <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromTop.Is3.FromBottom">
                <Heading Size="HeadingSize.Is4" TextWeight="TextWeight.Bold" Class="text-custom-primary">
                    @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Error}.{HttpStatusCode.NotFound}.{nameof(TaskModuleDto)}.{UIElementConstants.Collection}"))
                </Heading>
            </Column>
        }
    </Row>
}

@code {
    [Parameter]
    public bool FullWidthFields { get; set; }

    [Parameter]
    public DataOperation Operation { get; set; } = DataOperation.READ;

    [CascadingParameter]
    public IList<TaskModuleNoValidationDto> TaskModules { get; set; } = [];

    private bool isInitialized = false;

    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<GlobalPreferencesDto>(elementBase, Operation, null);

    private async Task RefreshViewAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshViewAsync;

        if (!isInitialized)
        {
            var loadModulesTask = Task.CompletedTask;
            loadModulesTask = LoadTaskModuleOptions();

            await Task.WhenAll(loadModulesTask);
        }
        await base.OnInitializedAsync();
        isInitialized = true;
    }

    private async Task LoadTaskModuleOptions()
    {
        var moduleOptions = await typelistApiService.LoadTaskModuleOptions();
        if (moduleOptions?.Count > 0 == true)
        {
            TaskModules.Clear();
            foreach (var option in moduleOptions) { TaskModules.Add(option); }
        }
    }
}