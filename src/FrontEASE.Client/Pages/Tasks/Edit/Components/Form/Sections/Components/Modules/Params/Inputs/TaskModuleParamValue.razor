@inject IResourceHandler resourceHandler
@inject ITaskManipulationService taskManipulationService
@inject IUIService uiService
@inject IMapper mapper

@{
    Flags = taskManipulationService.GetParamFlags(Module, ParamOption, ParamValue);
}

@if (Flags?.ParamType is not null)
{
    @if (Flags.IsTokenSelector)
    {
        <TaskModuleParamValueTokenSelector Module="@Module" ParamOption="@ParamOption" ParamValue="@ParamValue" ParamName="@Flags.ParamName" />
    }
    else if (Flags.IsListParam)
    {
        <TaskModuleListParamLabel ParamOption="@ParamOption" ParamValue="@ParamValue" ParameterName="@Flags.ParamName" />
        <TaskModuleListParamValue ParamOption="@ParamOption" ParamValue="@ParamValue" />
    }
    else
    {
        <TaskModuleParamValueInput ParameterID="@ParameterID" Flags="@Flags" Module="@Module" ParamOption="@ParamOption" ParamValue="@ParamValue" />
    }
}

@if (Flags?.DisplayActions == true)
{
    <Field ColumnSize="ColumnSize.Is2.OnWidescreen.Is1.OnFullHD" TextAlignment="TextAlignment.Center" Class="align-self-center" Padding="Padding.Is0.FromEnd.Is0.FromStart" Margin="Margin.Is2.FromTop">
        <FieldLabel>
            @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Actions}"))
        </FieldLabel>
        <Div>
            @if (Flags.IsDescriptionPresent)
            {
                <Tooltip Multiline="true" Text="@(ParamOption!.Description ?? Flags.InternalDescription)" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                    <Icon Class="action-icon-sm action-icon-info" Name="IconName.InfoCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                </Tooltip>
            }
            @if (Flags.IsDefaultPresent && !TaskMetadata.InitializationInProgres)
            {
                <Tooltip Multiline="true" Text="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Use}.{UIStateConstants.Default}")} : \"{Flags.ParamDefaultValue}\"")" Display="Display.InlineBlock">
                    <Icon Class="action-icon-sm action-icon-success" Name="IconName.Paste" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" Clicked="(() => taskManipulationService.FillParamDefaultValue(ParamValue, Flags.ParamDefaultValue))" />
                </Tooltip>
            }
        </Div>
    </Field>
}

@if (Flags?.ParamType == ParameterType.MARKDOWN)
{
    <Validation>
        <Field ColumnSize="@(Flags.DisplayActions? ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)" Class="input-validation-only">

            <MemoEdit ElementId="@(GetElementIdByOperation($"{ParamOption.Key}{nameof(Blazorise.Markdown.Markdown)}"))"
                      Disabled="@(TaskMetadata.InitializationInProgres)"
                      @bind-Text="@ParamValue.Value!.StringValue"
                      Placeholder="@(ParamOption.Default?.StringValue ?? ParamOption.LongName ?? string.Empty)">
                <Feedback>
                    <ValidationError Multiline="true" />
                </Feedback>
            </MemoEdit>
        </Field>
    </Validation>
}

@code {

    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = new();

    [CascadingParameter]
    public DataOperation Operation { get; set; }


    [Parameter]
    public TaskModuleDto? Module { get; set; }

    [Parameter]
    public TaskModuleParameterNoValidationDto ParamOption { get; set; } = new();

    [Parameter]
    public TaskModuleParameterDto ParamValue { get; set; } = new();

    private TaskModuleParamFlags? Flags = null;  

    private async Task RefreshViewAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshViewAsync;
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {      
        await base.OnParametersSetAsync();
        var derivedFlags = taskManipulationService.GetParamFlags(Module, ParamOption, ParamValue);
        mapper.Map(derivedFlags, Flags);
    }

    private Guid ParameterID = Guid.NewGuid();

    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<TaskModuleParameterDto>(elementBase, Operation, $"{Task.ID.ToString()}_{ParameterID.ToString()}");
}