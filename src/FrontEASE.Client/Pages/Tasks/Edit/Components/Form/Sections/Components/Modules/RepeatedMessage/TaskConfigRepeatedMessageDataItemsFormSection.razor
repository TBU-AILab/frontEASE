@inject IResourceHandler resourceHandler
@inject ITaskManipulationService taskManipulationService
@inject IUIManager uiManager


<Container Fluid>
    <Row>
        <Column ColumnSize="ColumnSize.IsFull">
            <Div Display="Display.Flex">
                <Column ColumnSize="ColumnSize.Is10" Class="align-self-center">
                    <FormSectionHeader DisplayText="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskConfigRepeatedMessageDto>(nameof(TaskConfigRepeatedMessageDto.RepeatedMessageItems), PropertyDisplayResourceType.FIELD)))" />
                </Column>
                @if (!TaskMetadata.InitializationInProgres)
                {
                    <Column ColumnSize="ColumnSize.Is2" TextAlignment="TextAlignment.End" Class="align-self-center">
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Data}.{nameof(TaskConfigRepeatedMessageDto.RepeatedMessageItems)}.{UIStateConstants.Explanation}"))" Display="Display.InlineBlock">
                            <Icon Class="action-icon-sm action-icon-warning" Name="IconName.ExclamationCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                        </Tooltip>
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Add}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon-sm action-icon-success" Name="IconName.PlusCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" Clicked="@AddNewTaskRepeatedMessageItem" />
                        </Tooltip>
                    </Column>
                }
            </Div>
        </Column>
    </Row>

</Container>

<Divider Class="divider-section bg-custom-light" Shadow="Shadow.Small" Margin="Margin.Is0.FromTop" />

<Column ColumnSize="ColumnSize.Is12">
    <Container Fluid>
        @foreach (var repeatedMessageItem in Task.Config.RepeatedMessage.RepeatedMessageItems)
        {
            var itemID = Guid.NewGuid();

            <Fields Class="form-group">

                <Validation>
                    <Field ColumnSize="ColumnSize.Is3.OnWidescreen">
                        <FieldLabel For="@(GetElementIdByOperation(nameof(TaskConfigRepeatedMessageItemDto.Weight), itemID))" RequiredIndicator>
                            @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskConfigRepeatedMessageItemDto>(nameof(TaskConfigRepeatedMessageItemDto.Weight), PropertyDisplayResourceType.FIELD)))
                        </FieldLabel>
                        <NumericEdit ElementId="@(GetElementIdByOperation(nameof(TaskConfigRepeatedMessageItemDto.Weight), itemID))"
                                     Disabled="@(TaskMetadata.InitializationInProgres)"
                                     @bind-Value="@repeatedMessageItem.Weight"
                                     Min="0"
                                     Max="1"
                                     Step="@((decimal?)0.01)">
                            <Feedback>
                                <ValidationError Multiline="true" />
                            </Feedback>
                        </NumericEdit>
                    </Field>
                </Validation>

                <Validation>
                    <Field ColumnSize="ColumnSize.Is8.OnWidescreen">
                        <FieldLabel For="@(GetElementIdByOperation(nameof(TaskConfigRepeatedMessageItemDto.Content), itemID))" RequiredIndicator>
                            @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskConfigRepeatedMessageItemDto>(nameof(TaskConfigRepeatedMessageItemDto.Content), PropertyDisplayResourceType.FIELD)))
                        </FieldLabel>
                        <MemoEdit ElementId="@(GetElementIdByOperation(nameof(TaskConfigRepeatedMessageItemDto.Content), itemID))"
                                  Disabled="@(TaskMetadata.InitializationInProgres)"
                                  AutoSize="false" Rows="1"
                                  Placeholder="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskConfigRepeatedMessageItemDto>(nameof(TaskConfigRepeatedMessageItemDto.Content), PropertyDisplayResourceType.PLACEHOLDER)))"
                                  @bind-Text="@repeatedMessageItem.Content">
                            <Feedback>
                                <ValidationError Multiline="true" />
                            </Feedback>
                        </MemoEdit>
                    </Field>
                </Validation>

                @if (!TaskMetadata.InitializationInProgres)
                {
                    <Field ColumnSize="ColumnSize.Is1.OnWidescreen" Display="Display.Flex" Class="alignment-center" Padding="Padding.Is0.FromEnd.Is0.FromStart" Style="gap: 25px;" Margin="Margin.Is2.FromTop">
                        <Div Class="vertical-divider" />

                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Remove}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon-sm action-icon-danger" Name="IconName.MinusCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" Clicked="@(async (e) => await RemoveTaskRepeatedMessageItem(e, repeatedMessageItem))" />
                        </Tooltip>
                    </Field>
                }

            </Fields>
        }
    </Container>
</Column>

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = null!;

    [CascadingParameter]
    public DataOperation DataOperation { get; set; }

    private string GetElementIdByOperation(string elementBase, Guid randomString) => VisualisationHelper.GetElementIdByOperation<TaskConfigRepeatedMessageItemDto>(elementBase, DataOperation, $"{Task.ID.ToString()}{randomString}");

    private void AddNewTaskRepeatedMessageItem() => taskManipulationService.AddTaskRepeatedMessageItem(Task);

    private Task RemoveTaskRepeatedMessageItem(object eventArgs, TaskConfigRepeatedMessageItemDto item)
    {
        taskManipulationService.RemoveTaskRepeatedMessageItem(Task, item);
        return System.Threading.Tasks.Task.CompletedTask;
    }
}