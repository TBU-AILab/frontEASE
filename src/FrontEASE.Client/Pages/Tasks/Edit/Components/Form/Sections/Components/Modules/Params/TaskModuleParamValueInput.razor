@inject IResourceHandler resourceHandler

@{
    var parameterType = DynamicParamUtils.GetParameterType(ParamOption.Type);
    var parameterName = ParamOption.LongName ?? ParamOption.ShortName ?? resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.NotAvailable}");
}

@switch (parameterType)
{
    case ParameterType.MARKDOWN:
        <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
            @if (!SkipLabel)
            {
                <FieldLabel For="@(GetElementIdByOperation($"{ParamOption.Key}{nameof(Blazorise.Markdown.Markdown)}"))" RequiredIndicator="@(ParamOption.Required == true)">
                    @parameterName
                </FieldLabel>
            }

            @if (!TaskMetadata.InitializationInProgres)
            {
                <Markdown ElementId="@(GetElementIdByOperation($"{ParamOption.Key}{nameof(Blazorise.Markdown.Markdown)}"))"
                          UploadImage="false"
                          NativeSpellcheck="false"
                          SpellChecker="false"
                          @bind-Value="@ParamValue.Value!.StringValue"
                          Placeholder="@(ParamOption.Default?.StringValue ?? ParamOption.LongName ?? string.Empty)" />
            }
        </Field>
        break;


    case ParameterType.STR:
        <Validation>
            <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                @if (!SkipLabel)
                {
                    <FieldLabel For="@(GetElementIdByOperation(ParamValue.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                        @parameterName
                    </FieldLabel>
                }

                <MemoEdit ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                          Disabled="@(TaskMetadata.InitializationInProgres)"
                          @bind-Text="@ParamValue.Value!.StringValue"
                          Placeholder="@(ParamOption.Default?.StringValue ?? ParamOption.LongName ?? string.Empty)"
                          Rows="2" AutoSize="true">
                    <Feedback>
                        <ValidationError Multiline="true" />
                    </Feedback>
                </MemoEdit>
            </Field>
        </Validation>
        break;

    case ParameterType.INT:
        <Validation>
            <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                @if (!SkipLabel)
                {
                    <FieldLabel For="@(GetElementIdByOperation(ParamOption.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                        @parameterName
                    </FieldLabel>
                }

                <NumericEdit TValue="int?"
                             ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                             Disabled="@(TaskMetadata.InitializationInProgres)"
                             @bind-Value="@ParamValue.Value!.IntValue"
                             Placeholder="@(ParamOption.Default?.IntValue?.ToString() ?? 0.ToString())"
                             Min="@(ParamOption.MinValue is float intMin ? (int)intMin : int.MinValue)"
                             Max="@(ParamOption.MaxValue is float intMax ? (int)intMax : int.MaxValue)">
                    <Feedback>
                        <ValidationError Multiline="true" />
                    </Feedback>
                </NumericEdit>
            </Field>
        </Validation>
        break;

    case ParameterType.FLOAT:
        <Validation>
            <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                @if (!SkipLabel)
                {
                    <FieldLabel For="@(GetElementIdByOperation(ParamOption.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                        @parameterName
                    </FieldLabel>
                }

                <NumericEdit TValue="float?"
                             ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                             Disabled="@(TaskMetadata.InitializationInProgres)"
                             @bind-Value="@ParamValue.Value!.FloatValue"
                             Placeholder="@(ParamOption.Default?.FloatValue?.ToString() ?? 0.0.ToString())"
                             Min="@(ParamOption.MinValue is float floatMin ? floatMin : float.MinValue)"
                             Max="@(ParamOption.MaxValue is float floatMax ? floatMax : float.MaxValue)">
                    <Feedback>
                        <ValidationError Multiline="true" />
                    </Feedback>
                </NumericEdit>
            </Field>
        </Validation>
        break;

    case ParameterType.ENUM:
        @if (!string.IsNullOrWhiteSpace(ParamOption.EnumOptions?.FirstOrDefault()?.StringValue))
        {
            <Validation>
                <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                    @if (!SkipLabel)
                    {
                        <FieldLabel For="@(GetElementIdByOperation(ParamOption.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                            @parameterName
                        </FieldLabel>
                    }

                    <Select TValue="string"
                            Disabled="@(TaskMetadata.InitializationInProgres)"
                            ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                            @bind-SelectedValue="@ParamValue.Value!.EnumValue!.StringValue">
                        <ChildContent>
                            <SelectItem Value="string.Empty">
                                @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Empty}"))
                            </SelectItem>
                            @foreach (var enumOption in ParamOption.EnumOptions)
                            {
                                var longName = (string?)null;
                                var longNameIndex = ParamOption.EnumOptions.Select(x => x.StringValue).ToList().FindIndex(x => x == enumOption.StringValue);
                                @if (ParamOption.EnumLongNames?.Count > 0)
                                {
                                    longName = ParamOption.EnumLongNames?.ElementAtOrDefault(longNameIndex);
                                }

                                <SelectItem Value="@(enumOption.StringValue)">
                                    @(longName ?? enumOption.StringValue)
                                </SelectItem>
                            }
                        </ChildContent>
                        <Feedback>
                            <ValidationError Multiline="true" />
                        </Feedback>
                    </Select>
                </Field>
            </Validation>
        }
        else if (ParamOption.EnumOptions?.FirstOrDefault()?.ModuleValue is not null)
        {
            var moduleType = ParamOption.EnumOptions.Select(x => x.ModuleValue?.PackageType).FirstOrDefault(x => x.HasValue);
            var moduleOptions = ParamOption.EnumOptions.Select(x => x.ModuleValue).ToList();

            if (moduleType is not null)
            {
                ParamValue.Value!.EnumValue!.ModuleValue ??= new() { PackageType = moduleType.Value };
                <TaskModuleDataFormSection ModuleOptions="@moduleOptions" Module="@ParamValue.Value!.EnumValue!.ModuleValue" ModuleName="@parameterName" />
            }
        }
        break;

    case ParameterType.BOOL:
        <Validation>
            <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                @if (!SkipLabel)
                {
                    <FieldLabel For="@(GetElementIdByOperation(ParamOption.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                        @parameterName
                    </FieldLabel>
                }

                <Check TValue="bool?"
                       ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                       Disabled="@(TaskMetadata.InitializationInProgres)"
                       @bind-Checked="@ParamValue.Value!.BoolValue">
                    <Feedback>
                        <ValidationError Multiline="true" />
                    </Feedback>
                </Check>
            </Field>
        </Validation>
        break;
}

@code {
    [Parameter]
    public bool SkipLabel { get; set; }

    [Parameter]
    public bool DisplayActions { get; set; }

    [CascadingParameter]
    public DataOperation Operation { get; set; }

    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = null!;

    [CascadingParameter]
    public TaskModuleParameterNoValidationDto ParamOption { get; set; } = new();

    [CascadingParameter]
    public TaskModuleParameterDto ParamValue { get; set; } = new();

    private Guid ParameterID = Guid.NewGuid();

    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<TaskModuleParameterDto>(elementBase, Operation, $"{Task.ID.ToString()}_{ParameterID.ToString()}");
}
