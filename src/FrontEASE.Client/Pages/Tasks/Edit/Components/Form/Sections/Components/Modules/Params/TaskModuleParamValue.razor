@inject IResourceHandler resourceHandler
@inject IUIService uiService
@inject IMapper mapper

@{
    var parameterType = DynamicParamUtils.GetParameterType(ParamOption.Type);
    IsDescriptionPresent = (!string.IsNullOrWhiteSpace(ParamOption.Description) || (ParamOption.EnumDescriptions?.Count > 0 && !string.IsNullOrWhiteSpace(ParamValue.Value!.EnumValue?.StringValue))) && ParamOption.Readonly != true;
    (IsDefaultPresent, var defaultValue) = ExtractDefaultValue(ParamOption);

    var parameterName = ParamOption.LongName ?? ParamOption.ShortName ?? resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.NotAvailable}");
    var skipLabel = parameterType == ParameterType.ENUM && ParamOption.EnumOptions?.FirstOrDefault()?.ModuleValue is not null;
}


@if (parameterType is not null)
{
    @if (Module.PackageType == ModuleType.LLM_CONNECTOR && ParamOption.ShortName?.Contains(TaskMetadataConstants.Token) == true)
    {
        IsSpecialCaseParam = true;
        <TaskModuleParamValueTokenSelector ParameterName="@parameterName" />
    }
    else
    {
        IsSpecialCaseParam = false;
        switch (parameterType)
        {

            case ParameterType.MARKDOWN:
                <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                    @if (!skipLabel)
                    {
                        <FieldLabel For="@(GetElementIdByOperation($"{ParamOption.Key}{nameof(Blazorise.Markdown.Markdown)}"))" RequiredIndicator="@(ParamOption.Required == true)">
                            @parameterName
                        </FieldLabel>
                    }

                    @if (!TaskMetadata.InitializationInProgres)
                    {
                        <Markdown ElementId="@(GetElementIdByOperation($"{ParamOption.Key}{nameof(Blazorise.Markdown.Markdown)}"))"
                                  UploadImage="false"
                                  @bind-Value="@ParamValue.Value!.StringValue"
                                  Placeholder="@(ParamOption.Default?.StringValue ?? ParamOption.LongName ?? string.Empty)" />
                    }
                </Field>
                break;


            case ParameterType.STR:
                <Validation>
                    <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                        @if (!skipLabel)
                        {
                            <FieldLabel For="@(GetElementIdByOperation(ParamValue.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                                @parameterName
                            </FieldLabel>
                        }

                        <MemoEdit ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                                  Disabled="@(TaskMetadata.InitializationInProgres)"
                                  @bind-Text="@ParamValue.Value!.StringValue"
                                  Placeholder="@(ParamOption.Default?.StringValue ?? ParamOption.LongName ?? string.Empty)"
                                  Rows="2" AutoSize="true">
                            <Feedback>
                                <ValidationError Multiline="true" />
                            </Feedback>
                        </MemoEdit>
                    </Field>
                </Validation>
                break;

            case ParameterType.INT:
                <Validation>
                    <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                        @if (!skipLabel)
                        {
                            <FieldLabel For="@(GetElementIdByOperation(ParamOption.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                                @parameterName
                            </FieldLabel>
                        }

                        <NumericEdit TValue="int?"
                                     ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                                     Disabled="@(TaskMetadata.InitializationInProgres)"
                                     @bind-Value="@ParamValue.Value!.IntValue"
                                     Placeholder="@(ParamOption.Default?.IntValue?.ToString() ?? 0.ToString())"
                                     Min="@(ParamOption.MinValue is float intMin ? (int)intMin : int.MinValue)"
                                     Max="@(ParamOption.MaxValue is float intMax ? (int)intMax : int.MaxValue)">
                            <Feedback>
                                <ValidationError Multiline="true" />
                            </Feedback>
                        </NumericEdit>
                    </Field>
                </Validation>
                break;

            case ParameterType.FLOAT:
                <Validation>
                    <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                        @if (!skipLabel)
                        {
                            <FieldLabel For="@(GetElementIdByOperation(ParamOption.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                                @parameterName
                            </FieldLabel>
                        }

                        <NumericEdit TValue="float?"
                                     ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                                     Disabled="@(TaskMetadata.InitializationInProgres)"
                                     @bind-Value="@ParamValue.Value!.FloatValue"
                                     Placeholder="@(ParamOption.Default?.FloatValue?.ToString() ?? 0.0.ToString())"
                                     Min="@(ParamOption.MinValue is float floatMin ? floatMin : float.MinValue)"
                                     Max="@(ParamOption.MaxValue is float floatMax ? floatMax : float.MaxValue)">
                            <Feedback>
                                <ValidationError Multiline="true" />
                            </Feedback>
                        </NumericEdit>
                    </Field>
                </Validation>
                break;

            case ParameterType.ENUM:
                @if (!string.IsNullOrWhiteSpace(ParamOption.EnumOptions?.FirstOrDefault()?.StringValue))
                {
                    <Validation>
                        <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                            @if (!skipLabel)
                            {
                                <FieldLabel For="@(GetElementIdByOperation(ParamOption.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                                    @parameterName
                                </FieldLabel>
                            }

                            <Select TValue="string"
                                    Disabled="@(TaskMetadata.InitializationInProgres)"
                                    ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                                    @bind-SelectedValue="@ParamValue.Value!.EnumValue!.StringValue">
                                <ChildContent>
                                    <SelectItem Value="string.Empty">
                                        @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Empty}"))
                                    </SelectItem>
                                    @foreach (var enumOption in ParamOption.EnumOptions)
                                    {
                                        var longName = (string?)null;
                                        var longNameIndex = ParamOption.EnumOptions.Select(x => x.StringValue).ToList().FindIndex(x => x == enumOption.StringValue);
                                        @if (ParamOption.EnumLongNames?.Count > 0)
                                        {
                                            longName = ParamOption.EnumLongNames?.ElementAtOrDefault(longNameIndex);
                                        }

                                        <SelectItem Value="@(enumOption.StringValue)">
                                            @(longName ?? enumOption.StringValue)
                                        </SelectItem>
                                    }
                                </ChildContent>
                                <Feedback>
                                    <ValidationError Multiline="true" />
                                </Feedback>
                            </Select>
                        </Field>
                    </Validation>
                }
                else if (ParamOption.EnumOptions?.FirstOrDefault()?.ModuleValue is not null)
                {
                    var moduleType = ParamOption.EnumOptions.Select(x => x.ModuleValue?.PackageType).FirstOrDefault(x => x.HasValue);
                    var moduleOptions = ParamOption.EnumOptions.Select(x => x.ModuleValue).ToList();

                    if (moduleType is not null)
                    {
                        ParamValue.Value!.EnumValue!.ModuleValue ??= new() { PackageType = moduleType.Value };
                        <TaskModuleDataFormSection ModuleOptions="@moduleOptions" Module="@ParamValue.Value!.EnumValue!.ModuleValue" ModuleName="@parameterName" />
                    }
                }
                break;

            case ParameterType.BOOL:
                <Validation>
                    <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                        @if (!skipLabel)
                        {
                            <FieldLabel For="@(GetElementIdByOperation(ParamOption.Key))" RequiredIndicator="@(ParamOption.Required == true)">
                                @parameterName
                            </FieldLabel>
                        }

                        <Check TValue="bool?"
                               ElementId="@(GetElementIdByOperation(ParamOption.Key))"
                               Disabled="@(TaskMetadata.InitializationInProgres)"
                               @bind-Checked="@ParamValue.Value!.BoolValue">
                            <Feedback>
                                <ValidationError Multiline="true" />
                            </Feedback>
                        </Check>
                    </Field>
                </Validation>
                break;
        }
    }
}

@if (DisplayActions)
{
    <Field ColumnSize="ColumnSize.Is2.OnWidescreen.Is1.OnFullHD" TextAlignment="TextAlignment.Center" Class="align-self-center" Padding="Padding.Is0.FromEnd.Is0.FromStart" Margin="Margin.Is2.FromTop">
        <FieldLabel>
            @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Actions}"))
        </FieldLabel>
        <Div>
            @if (IsDescriptionPresent)
            {
                var internalDescription = string.Empty;
                if (!string.IsNullOrWhiteSpace(ParamValue.Value?.EnumValue?.StringValue))
                {
                    var indexOfSelected = ParamOption?.EnumOptions?.Select(x => x.StringValue)?.ToList()?.FindIndex(x => x == ParamValue?.Value?.EnumValue?.StringValue);
                    if (indexOfSelected >= 0)
                    {
                        internalDescription = ParamOption!.EnumDescriptions!.ElementAt(indexOfSelected!.Value);
                    }
                }
                <Tooltip Multiline="true" Text="@(ParamOption!.Description ?? internalDescription)" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                    <Icon Class="action-icon-sm action-icon-info" Name="IconName.InfoCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                </Tooltip>
            }
            @if (IsDefaultPresent && !TaskMetadata.InitializationInProgres)
            {
                <Tooltip Multiline="true" Text="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Use}.{UIStateConstants.Default}")} : {defaultValue}")" Display="Display.InlineBlock">
                    <Icon Class="action-icon-sm action-icon-success" Name="IconName.Paste" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" Clicked="(() => FillParamDefaultValue(ParamValue, defaultValue))" />
                </Tooltip>
            }
        </Div>
    </Field>
}

@if (parameterType == ParameterType.MARKDOWN)
{
    <Validation>
        <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)" Class="input-validation-only">

            <MemoEdit ElementId="@(GetElementIdByOperation($"{ParamOption.Key}{nameof(MemoEdit)}"))"
                      Disabled="@(TaskMetadata.InitializationInProgres)"
                      @bind-Text="@ParamValue.Value!.StringValue"
                      Placeholder="@(ParamOption.Default?.StringValue ?? ParamOption.LongName ?? string.Empty)">
                <Feedback>
                    <ValidationError Multiline="true" />
                </Feedback>
            </MemoEdit>
        </Field>
    </Validation>
}

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = null!;

    [CascadingParameter]
    public DataOperation Operation { get; set; }

    [CascadingParameter]
    public TaskModuleDto Module { get; set; } = new();

    [CascadingParameter]
    public TaskModuleParameterNoValidationDto ParamOption { get; set; } = new();

    [CascadingParameter]
    public TaskModuleParameterDto ParamValue { get; set; } = new();

    private bool IsDescriptionPresent { get; set; }
    private bool IsDefaultPresent { get; set; }
    private bool IsSpecialCaseParam { get; set; }

    private bool DisplayActions => (IsDescriptionPresent || IsDefaultPresent) && !IsSpecialCaseParam;

    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<TaskModuleParameterDto>(elementBase, Operation, Task.ID.ToString());

    public static (bool DefaultValuePresent, string? DefaultValue) ExtractDefaultValue(TaskModuleParameterNoValidationDto parameter)
    {
        var defaultValuePresent = parameter.Default is not null && parameter.Readonly != true &&
                                  (!string.IsNullOrWhiteSpace(parameter.Default?.StringValue) ||
                                   parameter.Default?.FloatValue is not null ||
                                   parameter.Default?.IntValue is not null ||
                                   parameter.Default?.BoolValue is not null ||
                                   !string.IsNullOrWhiteSpace(parameter.Default?.EnumValue?.StringValue));

        var defaultValue = parameter.Default switch
        {
            { StringValue: { Length: > 0 } } => parameter.Default.StringValue,
            { FloatValue: not null } => parameter.Default.FloatValue?.ToString(),
            { IntValue: not null } => parameter.Default.IntValue?.ToString(),
            { BoolValue: not null } => parameter.Default.BoolValue?.ToString(),
            { EnumValue.StringValue: { Length: > 0 } } => parameter.Default.EnumValue.StringValue,
            _ => null
        };

        return (defaultValuePresent, defaultValue);
    }

    public void FillParamDefaultValue(TaskModuleParameterDto parameter, string? defaultValue)
    {
        var parameterType = DynamicParamUtils.GetParameterType(parameter.Type);
        if (parameterType is null || string.IsNullOrWhiteSpace(defaultValue)) { return; }

        switch (parameterType)
        {
            case ParameterType.INT:
                parameter.Value!.IntValue = int.Parse(defaultValue);
                break;

            case ParameterType.FLOAT:
                parameter.Value!.FloatValue = float.Parse(defaultValue);
                break;

            case ParameterType.STR:
            case ParameterType.MARKDOWN:
                parameter.Value!.StringValue = defaultValue;
                break;

            case ParameterType.BOOL:
                parameter.Value!.BoolValue = bool.Parse(defaultValue);
                break;

            case ParameterType.ENUM:
                var enumVal = new TaskModuleParameterEnumOptionDto() { StringValue = defaultValue };
                mapper.Map(enumVal, parameter.Value!.EnumValue);
                break;

            default:
                break;
        }
    }
}