@inject IResourceHandler resourceHandler
@inject IUIService uiService
@inject IMapper mapper

@{
    var parameterType = DynamicParamUtils.GetParameterType(ParamOption.Type);
    IsListParam = parameterType == ParameterType.LIST;

    IsDescriptionPresent = CheckDescriptionPresent(ParamOption, ParamValue);
    (IsDefaultPresent, var defaultValue) = ExtractDefaultValue(ParamOption);

    var parameterName = ParamOption.LongName ?? ParamOption.ShortName ?? resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.NotAvailable}");
    var skipLabel = parameterType == ParameterType.ENUM && ParamOption.EnumOptions?.FirstOrDefault()?.ModuleValue is not null;
}


@if (parameterType is not null)
{
    @if (Module?.PackageType == ModuleType.LLM_CONNECTOR && ParamOption.ShortName?.Contains(TaskMetadataConstants.Token) == true)
    {
        IsSpecialCaseParam = true;
        <TaskModuleParamValueTokenSelector ParameterName="@parameterName" />
    }
    else if (IsListParam)
    {
        IsSpecialCaseParam = true;
        <TaskModuleListParamLabel ParameterName="@parameterName" />

        @foreach (var listParam in ParamValue.Value!.ListValue!.ParameterValues)
        {
            <Container Fluid Border="Border.Is1.Rounded.Light">
                <Row Margin="Margin.Is2.FromTop.Is2.FromBottom">
                    <Column ColumnSize="ColumnSize.Is11">
                        @foreach (var paramVal in listParam)
                        {
                            var paramOption = GetListValueParamOption(paramVal.ShortName);
                            if (paramOption is not null)
                            {
                                var isDescriptionPresent = CheckDescriptionPresent(paramOption, paramVal);
                                (var isListDefaultPresent, var listDefaultValue) = ExtractDefaultValue(paramOption);
                                var displayActions = isListDefaultPresent || isDescriptionPresent;
                                var skipListLabel = parameterType == ParameterType.ENUM && paramOption.EnumOptions?.FirstOrDefault()?.ModuleValue is not null;
                                var paramType = DynamicParamUtils.GetParameterType(paramOption.Type);

                                if (paramType is not null)
                                {
                                    <Container Fluid>
                                        <Row>
                                            <Column ColumnSize="ColumnSize.IsFull">
                                                <Fields>
                                                    <TaskModuleParamValueInput SkipLabel="@skipListLabel" ParamOption="@paramOption" ParamValue="@paramVal" DisplayActions="@displayActions" />

                                                    @if (displayActions)
                                                    {
                                                        <Field ColumnSize="ColumnSize.Is2.OnWidescreen.Is1.OnFullHD" TextAlignment="TextAlignment.Center" Class="align-self-center" Padding="Padding.Is0.FromEnd.Is0.FromStart" Margin="Margin.Is2.FromTop">
                                                            @if (isDescriptionPresent)
                                                            {
                                                                var internalDescription = string.Empty;
                                                                if (!string.IsNullOrWhiteSpace(paramVal.Value?.EnumValue?.StringValue))
                                                                {
                                                                    var indexOfSelected = paramOption?.EnumOptions?.Select(x => x.StringValue)?.ToList()?.FindIndex(x => x == paramVal?.Value?.EnumValue?.StringValue);
                                                                    if (indexOfSelected >= 0)
                                                                    {
                                                                        internalDescription = paramOption!.EnumDescriptions!.ElementAt(indexOfSelected!.Value);
                                                                    }
                                                                }

                                                                <Tooltip Multiline="true" Text="@(paramOption!.Description ?? internalDescription)" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                                                                    <Icon Class="action-icon-sm action-icon-info" Name="IconName.InfoCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                                                                </Tooltip>
                                                            }
                                                            @if (isListDefaultPresent && !TaskMetadata.InitializationInProgres)
                                                            {
                                                                <Tooltip Multiline="true" Text="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Use}.{UIStateConstants.Default}")} : \"{listDefaultValue}\"")" Display="Display.InlineBlock">
                                                                    <Icon Class="action-icon-sm action-icon-success" Name="IconName.Paste" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" Clicked="(() => FillParamDefaultValue(paramVal, listDefaultValue))" />
                                                                </Tooltip>
                                                            }
                                                        </Field>
                                                    }
                                                </Fields>
                                            </Column>
                                        </Row>
                                    </Container>


                                }
                            }
                        }
                    </Column>
                    <Column ColumnSize="ColumnSize.Is1" Padding="Padding.Is2" Margin="Margin.Is3.FromTop.FromBottom">
                        @if (!TaskMetadata.InitializationInProgres)
                        {
                            <Icon Class="action-icon-sm action-icon-danger action-icon-section-full-length" Display="Display.Flex" Width="Width.Is100" Height="Height.Is100" Name="IconName.MinusCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" Clicked="(() => RemoveListParameter(listParam))" />
                        }
                    </Column>
                </Row>
            </Container>

            <Divider Class="divider-main bg-custom-light" Shadow="Shadow.Small" Style="height:2px !important;" Margin="Margin.Is0.FromTop" />
        }
    }
    else
    {
        IsSpecialCaseParam = false;
        <TaskModuleParamValueInput SkipLabel="@skipLabel" ParamOption="@ParamOption" ParamValue="@ParamValue" DisplayActions="@DisplayActions" />
    }
}

@if (DisplayActions)
{
    <Field ColumnSize="ColumnSize.Is2.OnWidescreen.Is1.OnFullHD" TextAlignment="TextAlignment.Center" Class="align-self-center" Padding="Padding.Is0.FromEnd.Is0.FromStart" Margin="Margin.Is2.FromTop">
        <FieldLabel>
            @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Actions}"))
        </FieldLabel>
        <Div>
            @if (IsDescriptionPresent)
            {
                var internalDescription = string.Empty;
                if (!string.IsNullOrWhiteSpace(ParamValue.Value?.EnumValue?.StringValue))
                {
                    var indexOfSelected = ParamOption?.EnumOptions?.Select(x => x.StringValue)?.ToList()?.FindIndex(x => x == ParamValue?.Value?.EnumValue?.StringValue);
                    if (indexOfSelected >= 0)
                    {
                        internalDescription = ParamOption!.EnumDescriptions!.ElementAt(indexOfSelected!.Value);
                    }
                }
                <Tooltip Multiline="true" Text="@(ParamOption!.Description ?? internalDescription)" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                    <Icon Class="action-icon-sm action-icon-info" Name="IconName.InfoCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                </Tooltip>
            }
            @if (IsDefaultPresent && !TaskMetadata.InitializationInProgres)
            {
                <Tooltip Multiline="true" Text="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Use}.{UIStateConstants.Default}")} : \"{defaultValue}\"")" Display="Display.InlineBlock">
                    <Icon Class="action-icon-sm action-icon-success" Name="IconName.Paste" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" Clicked="(() => FillParamDefaultValue(ParamValue, defaultValue))" />
                </Tooltip>
            }
        </Div>
    </Field>
}

@if (parameterType == ParameterType.MARKDOWN)
{
    <Validation>
        <Field ColumnSize="@(DisplayActions ?  ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)" Class="input-validation-only">

            <MemoEdit ElementId="@(GetElementIdByOperation($"{ParamOption.Key}{nameof(MemoEdit)}"))"
                      Disabled="@(TaskMetadata.InitializationInProgres)"
                      @bind-Text="@ParamValue.Value!.StringValue"
                      Placeholder="@(ParamOption.Default?.StringValue ?? ParamOption.LongName ?? string.Empty)">
                <Feedback>
                    <ValidationError Multiline="true" />
                </Feedback>
            </MemoEdit>
        </Field>
    </Validation>
}

@code {

    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = null!;

    [CascadingParameter]
    public DataOperation Operation { get; set; }

    [CascadingParameter]
    public TaskModuleDto Module { get; set; } = new();

    [CascadingParameter]
    public TaskModuleParameterNoValidationDto ParamOption { get; set; } = new();

    [CascadingParameter]
    public TaskModuleParameterDto ParamValue { get; set; } = new();

    private Guid ParameterID = Guid.NewGuid();
    private bool IsDescriptionPresent { get; set; }
    private bool IsDefaultPresent { get; set; }
    private bool IsListParam { get; set; }
    private bool IsSpecialCaseParam { get; set; }

    private bool DisplayActions => (IsDescriptionPresent || IsDefaultPresent || IsListParam) && !IsSpecialCaseParam;
    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<TaskModuleParameterDto>(elementBase, Operation, $"{Task.ID.ToString()}_{ParameterID.ToString()}");

    public static (bool DefaultValuePresent, string? DefaultValue) ExtractDefaultValue(TaskModuleParameterNoValidationDto parameter)
    {
        var defaultValuePresent = parameter.Default is not null && parameter.Readonly != true &&
                                  (!string.IsNullOrWhiteSpace(parameter.Default?.StringValue) ||
                                   parameter.Default?.FloatValue is not null ||
                                   parameter.Default?.IntValue is not null ||
                                   parameter.Default?.BoolValue is not null ||
                                   !string.IsNullOrWhiteSpace(parameter.Default?.EnumValue?.StringValue));

        var defaultValue = parameter.Default switch
        {
            { StringValue: { Length: > 0 } } => parameter.Default.StringValue,
            { FloatValue: not null } => parameter.Default.FloatValue?.ToString(),
            { IntValue: not null } => parameter.Default.IntValue?.ToString(),
            { BoolValue: not null } => parameter.Default.BoolValue?.ToString(),
            { EnumValue.StringValue: { Length: > 0 } } => parameter.Default.EnumValue.StringValue,
            _ => null
        };

        return (defaultValuePresent, defaultValue);
    }

    public void FillParamDefaultValue(TaskModuleParameterDto parameter, string? defaultValue)
    {
        var parameterType = DynamicParamUtils.GetParameterType(parameter.Type);
        if (parameterType is null || string.IsNullOrWhiteSpace(defaultValue)) { return; }

        switch (parameterType)
        {
            case ParameterType.INT:
                parameter.Value!.IntValue = int.Parse(defaultValue);
                break;

            case ParameterType.FLOAT:
                parameter.Value!.FloatValue = float.Parse(defaultValue);
                break;

            case ParameterType.STR:
            case ParameterType.MARKDOWN:
                parameter.Value!.StringValue = defaultValue;
                break;

            case ParameterType.BOOL:
                parameter.Value!.BoolValue = bool.Parse(defaultValue);
                break;

            case ParameterType.ENUM:
                var enumVal = new TaskModuleParameterEnumOptionDto() { StringValue = defaultValue };
                mapper.Map(enumVal, parameter.Value!.EnumValue);
                break;

            default:
                break;
        }
    }

    private bool CheckDescriptionPresent(TaskModuleParameterNoValidationDto paramOption, TaskModuleParameterDto paramValue)
    {
        return (!string.IsNullOrWhiteSpace(paramOption.Description) || (paramOption.EnumDescriptions?.Count > 0 && !string.IsNullOrWhiteSpace(paramValue.Value!.EnumValue?.StringValue))) && paramOption.Readonly != true;
    }

    private void RemoveListParameter(IList<TaskModuleParameterDto> listParam) =>
        ParamValue.Value!.ListValue!.ParameterValues.Remove(listParam);

    private TaskModuleParameterNoValidationDto? GetListValueParamOption(string shortName) =>
        ParamOption.Default?.ListValue?.ParameterValues?.FirstOrDefault()?.FirstOrDefault(x => x.ShortName == shortName);
}