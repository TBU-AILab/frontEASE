@inject IResourceHandler resourceHandler
@inject IUIManager uiManager

<Row Padding="Padding.Is3.FromBottom" Border="Border.Is1.Rounded" Style="@($"border-color: {uiManager.Theme.BackgroundOptions.Light} !important;")" Shadow="Shadow.Small" Margin="Margin.Is3.FromTop.Is3.FromBottom" TextOverflow="TextOverflow.Wrap" NoGutters>
    <Column ColumnSize="ColumnSize.IsFull" Display="Display.Flex" Class="justify-content-between align-items-center" Padding="Padding.Is2" Shadow="Shadow.Small">
        <Div Display="Display.Flex" Width="Width.Is100" Class="justify-content-center">
            <Text TextWeight="TextWeight.Bold" Class="text-center">
                @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskConfigDto>(nameof(TaskConfigDto.RepeatedMessage), PropertyDisplayResourceType.FIELD)))
            </Text>
        </Div>
    </Column>

    <Fields>
        <Validation>
            <Field ColumnSize="ColumnSize.Is10.Is11.OnWidescreen">
                <FieldLabel For="@(GetElementIdByOperation(nameof(TaskConfigRepeatedMessageDto.RepeatedMessageType)))" RequiredIndicator>
                    @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskConfigRepeatedMessageDto>(nameof(TaskConfigRepeatedMessageDto.RepeatedMessageType), PropertyDisplayResourceType.FIELD)))
                </FieldLabel>
                <Select Disabled="@(TaskMetadata.InitializationInProgres)"
                        @bind-SelectedValue="@Task.Config.RepeatedMessage.RepeatedMessageType"
                        ElementId="@(GetElementIdByOperation(nameof(TaskConfigRepeatedMessageDto.RepeatedMessageType)))">
                    <ChildContent>
                        @foreach (var messageType in Enum.GetValues(typeof(RepeatedMessageType)))
                        {
                            <SelectItem TValue="RepeatedMessageType" Value="@((RepeatedMessageType)messageType)">
                                @(resourceHandler.GetResource(((RepeatedMessageType)messageType).GetEnumResourceValue()))
                            </SelectItem>
                        }
                    </ChildContent>
                    <Feedback>
                        <ValidationError Multiline="true" />
                    </Feedback>
                </Select>
            </Field>

        </Validation>

        <Field ColumnSize="ColumnSize.Is2.Is1.OnWidescreen" TextAlignment="TextAlignment.Center" Class="align-self-center" Padding="Padding.Is0.FromEnd.Is0.FromStart" Margin="Margin.Is2.FromTop">
            <FieldLabel>
                @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Info}"))
            </FieldLabel>
            <Div>
                <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Data}.{nameof(RepeatedMessageType)}.{Task.Config.RepeatedMessage.RepeatedMessageType}.{UIStateConstants.Explanation}"))" Display="Display.InlineBlock">
                    <Icon Class="action-icon-sm action-icon-info" Name="IconName.InfoCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                </Tooltip>
            </Div>
        </Field>

    </Fields>

    <Column ColumnSize="ColumnSize.IsFull">
        <Container Fluid>
            <TaskConfigRepeatedMessageDataItemsFormSection />
        </Container>
    </Column>
</Row>

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = null!;

    [CascadingParameter]
    public DataOperation Operation { get; set; }


    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<TaskConfigRepeatedMessageDto>(elementBase, Operation, Task.ID.ToString());
}