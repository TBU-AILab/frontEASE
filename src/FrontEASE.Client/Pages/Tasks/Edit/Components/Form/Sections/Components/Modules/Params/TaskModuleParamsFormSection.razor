@inject IResourceHandler resourceHandler
@inject IMapper mapper
@inject IUIManager uiManager

@if (AvailableParams?.Count > 0)
{
    <Row Padding="Padding.Is3.FromBottom" Border="Border.Is1.Rounded" Class="border-custom-light" Shadow="Shadow.Small" Margin="Margin.Is3.FromTop.Is3.FromBottom" TextOverflow="TextOverflow.Wrap">
        <Column ColumnSize="ColumnSize.IsFull" Display="Display.Flex" Class="justify-content-between align-items-center" Padding="Padding.Is2">
            <Div Display="Display.Flex" Width="Width.Is100" Class="justify-content-center">
                <Text TextWeight="TextWeight.Bold" Class="text-center">
                    @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskModuleDto>(nameof(TaskModuleDto.Parameters), PropertyDisplayResourceType.FIELD)))
                </Text>
            </Div>
        </Column>


            <Column ColumnSize="ColumnSize.IsFull">
                <Container Fluid>
                    <Row>

                        <Container Fluid Margin="Margin.Is3.FromTop">
                            <Row Padding="Padding.Is0">

                                @foreach (var ParamOption in AvailableParams.OrderBy(x => x.Readonly))
                                {
                                    var ParamValue = Module.Parameters?.SingleOrDefault(x => x.ShortName == ParamOption.ShortName);
                                    var paramType = DynamicParamUtils.GetParameterType(ParamOption.Type);

                                    ParamValue = ParamOption.Readonly == true ? InitializeReadonlyParamValue(ParamValue, ParamOption) : InitializeParamValue(ParamValue, ParamOption, paramType!.Value);

                                    <Fields>
                                        <CascadingValue Value="ParamOption">
                                            <CascadingValue Value="ParamValue">
                                                @if (ParamOption.Readonly != true)
                                                {
                                                    <TaskModuleParamValue />
                                                }
                                                else
                                                {
                                                    <TaskModuleParamLabel />
                                                }
                                            </CascadingValue>
                                        </CascadingValue>

                                    </Fields>
                                }
                            </Row>
                        </Container>
                    </Row>
                </Container>
            </Column>
    </Row>
}

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskModuleDto Module { get; set; } = new();

    [Parameter]
    public IList<TaskModuleParameterNoValidationDto> AvailableParams { get; set; } = null!;


    private TaskModuleParameterDto InitializeParamValue(TaskModuleParameterDto? parameterValue, TaskModuleParameterNoValidationDto parameterOption, ParameterType parameterType)
    {
        SetParameterValueBaseIfNeeded(parameterValue, parameterOption);

        parameterValue!.Value ??= new();
        parameterValue.Value.Metadata = mapper.Map<TaskModuleParameterNoValidationMetadataDto>(parameterOption);

        parameterValue.Value.EnumValue ??= parameterType == ParameterType.ENUM ? new() : null;
        if (parameterValue.Value.EnumValue is not null)
        {
            parameterValue.Value.EnumValue.Metadata = parameterValue.Value.Metadata;
        }

        return parameterValue;
    }

    private TaskModuleParameterDto InitializeReadonlyParamValue(TaskModuleParameterDto? parameterValue, TaskModuleParameterNoValidationDto parameterOption)
    {
        SetParameterValueBaseIfNeeded(parameterValue, parameterOption);

        mapper.Map(parameterOption.Default, parameterValue!.Value);
        return parameterValue;
    }

    private void SetParameterValueBaseIfNeeded(TaskModuleParameterDto? parameterValue, TaskModuleParameterNoValidationDto parameterOption)
    {
        if (parameterValue is null)
        {
            parameterValue = new()
                {
                    Key = parameterOption.Key,
                    ShortName = parameterOption.ShortName,
                    Type = parameterOption.Type
                };

            Module.Parameters.Add(parameterValue);
        }
    }
}