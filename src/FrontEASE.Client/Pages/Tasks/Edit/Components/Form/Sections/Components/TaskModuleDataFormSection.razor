@inject IResourceHandler resourceHandler
@inject ITaskManipulationService taskManipulationService
@inject IUIManager uiManager

<Row Margin="Margin.Is4.FromBottom">
    <Container Fluid>
        <FormSectionHeader DisplayText="@ModuleName" />
    </Container>

    <Divider Class="divider-section" Shadow="Shadow.Small" Style="@($"height: 2px !important; background-color: {uiManager.Theme.BackgroundOptions.Light};")" Margin="Margin.Is0.FromTop.Is1.FromBottom" />
    @{
        var TaskModuleData = ModuleOptions.FirstOrDefault(x => x.ShortName == Module.ShortName);
    }

    <Column ColumnSize="ColumnSize.Is12" Padding="Padding.Is3.FromTop">
        <Fields>

            <Validation>
                <Field ColumnSize="@(!string.IsNullOrWhiteSpace(TaskModuleData?.Description) ? ColumnSize.Is10.Is11.OnFullHD : ColumnSize.IsFull)">
                    <FieldLabel For="@(GetElementIdByOperation(nameof(TaskModuleDto.ShortName)))" RequiredIndicator>
                        @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskModuleDto>(nameof(TaskModuleDto.ShortName), PropertyDisplayResourceType.FIELD)))
                    </FieldLabel>
                    <Select TValue="string"
                            Disabled="@(TaskMetadata.InitializationInProgres)"
                            SelectedValue="@Module.ShortName"
                            SelectedValueExpression="@(() => Module.ShortName)"
                            SelectedValueChanged="@((value) => SelectionChanged(value))"
                            ElementId="@(GetElementIdByOperation(nameof(TaskModuleDto.ShortName)))">
                        <ChildContent>
                            <SelectItem Value="string.Empty" TextColor="TextColor.Black50">
                                @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Empty}"))
                            </SelectItem>
                            @foreach (var moduleType in ModuleOptions)
                            {
                                <SelectItem Value="@(moduleType.ShortName)">
                                    @(moduleType.LongName)
                                </SelectItem>
                            }
                        </ChildContent>
                        <Feedback>
                            <ValidationError Multiline="true" />
                        </Feedback>
                    </Select>
                </Field>
            </Validation>

            @if (!string.IsNullOrWhiteSpace(TaskModuleData?.Description))
            {
                <Field ColumnSize="ColumnSize.Is2.Is1.OnFullHD" TextAlignment="TextAlignment.Center" Class="align-self-center" Padding="Padding.Is0.FromEnd.Is0.FromStart" Margin="Margin.Is2.FromTop">
                    <FieldLabel>
                        @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Actions}"))
                    </FieldLabel>
                    <Div>
                        <Tooltip Multiline="true" Text="@(TaskModuleData?.Description)" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd">
                            <Icon Class="action-icon-sm action-icon-info" Name="IconName.InfoCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                        </Tooltip>
                    </Div>
                </Field>
            }

        </Fields>

        <Column ColumnSize="ColumnSize.IsFull">
            <Container Fluid>
                @if (!string.IsNullOrWhiteSpace(Module.ShortName))
                {
                    <CascadingValue Value="Module">
                        <TaskModuleParamsFormSection AvailableParams="@TaskModuleData?.Parameters" />
                    </CascadingValue>
                }
            </Container>
        </Column>
    </Column>
</Row>

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = null!;

    [CascadingParameter]
    public DataOperation Operation { get; set; }

    [Parameter]
    public IList<TaskModuleNoValidationDto> ModuleOptions { get; set; } = [];

    [Parameter]
    public TaskModuleDto Module { get; set; } = new();

    [Parameter]
    public string? ModuleName { get; set; }

    private string GetElementIdByOperation(string elementBase) => VisualisationHelper.GetElementIdByOperation<TaskModuleDto>(elementBase, Operation, Task.ID.ToString());

    private void SelectionChanged(string value)
    {
        var sourceModule = ModuleOptions.FirstOrDefault(x => x.ShortName == value);
        taskManipulationService.SwapSelectedModule(sourceModule, Module);
    }
}
