@inject IResourceHandler resourceHandler
@inject ITaskManipulationService taskManipulationService
@inject IUIManager uiManager

<Row>
    <Container Fluid>
        <Row>
            <Column ColumnSize="ColumnSize.IsFull">
                <Div Display="Display.Flex">
                    <Column ColumnSize="ColumnSize.Is12" TextAlignment="TextAlignment.Center" Class="align-self-center">
                        <FormSectionHeader DisplayText="@ModuleName" />
                    </Column>
                </Div>
            </Column>
        </Row>
    </Container>

    <Divider Class="divider-section" style="@($"height: 2px !important; background-color: {uiManager.Theme.BackgroundOptions.Light};")"  Shadow="Shadow.Small" />

    <Column ColumnSize="ColumnSize.Is12" Padding="Padding.Is3.FromTop">
        <Container Fluid>
            @if (Modules.Count > 0)
            {
                @foreach (var module in Modules)
                {
                    var TaskModuleData = ModuleOptions.FirstOrDefault(x => x.ShortName == module.ShortName);

                    <Fields Class="form-group">

                        <Column ColumnSize="@(string.IsNullOrWhiteSpace(TaskModuleData?.Description) ? ColumnSize.IsFull : ColumnSize.Is10.OnWidescreen)" Margin="Margin.Is2.FromTop.Is2.FromBottom">
                            <Text>
                                @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskModuleDto>(nameof(TaskModuleDto.ShortName), PropertyDisplayResourceType.FIELD)))
                            </Text>
                            <Span TextWeight="TextWeight.Bold" Class="fst-italic">
                                @($" {TaskModuleData?.LongName ?? module.ShortName}")
                            </Span>
                        </Column>

                        @if (!string.IsNullOrWhiteSpace(TaskModuleData?.Description))
                        {
                            <Field ColumnSize="ColumnSize.Is2.OnWidescreen" TextAlignment="TextAlignment.Center" Class="align-self-center" Padding="Padding.Is0.FromEnd.Is0.FromStart" Margin="Margin.Is2.FromTop">
                                <Div>
                                    @if (!string.IsNullOrWhiteSpace(TaskModuleData?.Description))
                                    {
                                        <Tooltip Multiline="true" Text="@(TaskModuleData?.Description)" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd">
                                            <Icon Class="action-icon-sm action-icon-info" Name="IconName.InfoCircle" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                                        </Tooltip>
                                    }
                                </Div>
                            </Field>
                        }

                    </Fields>

                    @if (!string.IsNullOrWhiteSpace(module.ShortName))
                    {
                        var Module = module;
                        var moduleOptions = ModuleOptions.SingleOrDefault(x => x.ShortName == module.ShortName);

                        if(moduleOptions is not null)
                        {
                            <CascadingValue Value="Module">
                                <TaskModuleParamsViewSection AvailableParams="@moduleOptions.Parameters" />
                            </CascadingValue>
                        }
                        else
                        {
                            Console.WriteLine($"Module not found - {module.ShortName}");
                        }
                    }
                }
            }
            else
            {
                <Div>
                    <Text TextColor="TextColor.Black50">
                        @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Error}.{HttpStatusCode.NotFound}.{nameof(TaskConfigDto)}.{CollectionName}.{UIElementConstants.Collection}"))
                    </Text>
                </Div>
            }
        </Container>
    </Column>
</Row>

@code {
    [Parameter]
    public IList<TaskModuleNoValidationDto> ModuleOptions { get; set; } = [];

    [Parameter]
    public IList<TaskModuleDto> Modules { get; set; } = [];

    [Parameter]
    public string ModuleName { get; set; } = string.Empty;

    [Parameter]
    public string CollectionName { get; set; } = string.Empty;
}
