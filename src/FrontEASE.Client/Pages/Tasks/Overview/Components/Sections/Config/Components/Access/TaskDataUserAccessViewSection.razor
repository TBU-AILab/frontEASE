@inject IResourceHandler resourceHandler
@inject AppSettings appSettings

@if (Task.Members.Count > 0)
{
    <Row>

        <Container Fluid>
            <FormSectionHeader DisplayText="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskDto>(nameof(TaskDto.Members), PropertyDisplayResourceType.FIELD)))" />
        </Container>

        <Divider Class="divider-section" Background="Background.Primary" Shadow="Shadow.Small" />

        <Column ColumnSize="ColumnSize.Is12" Padding="Padding.Is3.FromTop" TextAlignment="TextAlignment.Center">

            <Container Fluid>
                <Row>
                    @foreach (var member in Task.Members)
                    {
                        <Column ColumnSize="ColumnSize.IsFull">
                            <Image Border="Border.RoundedCircle"
                                   Source="@(GetUserImageUrl(member.Id!.Value))"
                                   Class="@($"full-max-width datagrid-item-image-small {(member.Id == Task?.Author?.Id ? "overview-background-author" : string.Empty)}")" Loading />
                        </Column>

                        @if (!string.IsNullOrEmpty(member.UserName))
                        {
                            <Column ColumnSize="ColumnSize.IsFull">
                                <Text TextWeight="TextWeight.Bold">
                                    @member.UserName
                                </Text>
                                @if (!string.IsNullOrEmpty(member.Email))
                                {
                                    <Span TextColor="TextColor.Black50">
                                        @($" ({member.Email})")
                                    </Span>
                                }
                            </Column>
                        }
                    }
                </Row>
            </Container>
        </Column>
    </Row>
}

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public IList<ApplicationUserDto> AvailableUsers { get; set; } = [];

    private string? GetUserImageUrl(Guid userID)
    {
        var userData = AvailableUsers.SingleOrDefault(x => x.Id == userID);
        return string.IsNullOrWhiteSpace(userData?.Image?.ImageUrl) ?
            @"\resources\images\users\profilePictureMissing.png" :
            $"{appSettings.ApiSettings!.BaseUrl}/{userData?.Image?.ImageUrl}";
    }
}