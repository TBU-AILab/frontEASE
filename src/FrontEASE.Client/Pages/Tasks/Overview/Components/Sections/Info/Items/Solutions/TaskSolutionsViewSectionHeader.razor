@inject IFileApiService fileApiService
@inject IResourceHandler resourceHandler
@inject Blazored.Toast.Services.IToastService toastService

<Row>
    <Column ColumnSize="ColumnSize.Is12" Padding="Padding.Is1.FromTop.Is1.FromBottom" Margin="Margin.Is4.FromTop">
        <Div Display="Display.Flex" Class="justify-content-between align-items-center">
            <Div Flex="Flex.Grow" TextAlignment="TextAlignment.Center">
                <Heading Size="HeadingSize.Is3">
                    @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskDto>(nameof(TaskDto.Solutions), PropertyDisplayResourceType.FIELD)))
                </Heading>
            </Div>

            <Div Margin="Margin.IsAuto.FromStart">
                @if (fullDownloadOngoing)
                {
                    <SpinnerButton TextColor="TextColor.Info" SmallControlSpinner="true" DisplayText="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Download}"))" TextSize="TextSize.Medium" />
                }
                else
                {
                    <Icon Name="IconName.Download" IconSize="IconSize.x2" IconStyle="IconStyle.Solid" @onclick="@(async () => await DownloadSolutionArchiveFull())" Class="main-action-icon main-action-icon-info" />
                }
            </Div>
        </Div>
    </Column>
</Row>

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    private bool fullDownloadOngoing = false;

    public async Task DownloadSolutionArchiveFull()
    {
        fullDownloadOngoing = true;

        var archiveName = $"{Task.Config.Name} ({Task.ID})";
        var fileSaved = await fileApiService.DownloadDirectory(archiveName, Task.ID, FileSpecification.TASK_FULL_ARCHIVE);
        if (!fileSaved)
        {
            var message = ($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Result}.{UIStateConstants.ActionFail}")} - {resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Download}")} ({archiveName})");
            toastService.ShowError(message);
        }

        fullDownloadOngoing = false;
    }
}