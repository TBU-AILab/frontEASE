@inject IResourceHandler resourceHandler
@inject IUIManager uiManager

<CardHeader Border="Border.Is0" Style="@($"background-color: {uiManager.Theme.BackgroundOptions.Secondary};")" Overflow="Overflow.Hidden">
    <Container Fluid>
        <Row>
            <Column Padding="Padding.Is0" ColumnSize="ColumnSize.Is6.OnTablet" TextAlignment="TextAlignment.Start">
                @if (Message.Tokens is not null)
                {
                    <Text>
                        @($"{resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskMessageDto>(nameof(TaskMessageDto.Tokens), PropertyDisplayResourceType.FIELD))}: ")
                    </Text>
                    <Span TextWeight="TextWeight.Bold">
                        @Message.Tokens
                    </Span>
                }
            </Column>

            <Column ColumnSize="ColumnSize.Is6.OnTablet" TextAlignment="TextAlignment.End">
                <Text>
                    @(resourceHandler.GetResource(((MessageRole)Message.Role).GetEnumResourceValue()))
                </Text>
                @if (Message.Role == MessageRole.AI && !string.IsNullOrWhiteSpace(Message.Content) && !string.IsNullOrWhiteSpace(Message.Model))
                {
                    <Span TextWeight="TextWeight.Bold">
                        @($" ({Message.Model})")
                    </Span>
                }
            </Column>
        </Row>
    </Container>
</CardHeader>

@code {
    [CascadingParameter]
    public TaskMessageDto Message { get; set; } = null!;

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = null!;
}
