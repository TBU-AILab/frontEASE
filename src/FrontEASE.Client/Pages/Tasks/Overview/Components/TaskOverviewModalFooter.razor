@inject IMapper mapper
@inject IResourceHandler resourceHandler
@inject IShortcutKeyDictionary shortcutDictionary
@inject IUIManager uiManager

<ModalFooter Class="bg-custom-secondary border-custom-light">
    <Container Fluid Padding="Padding.Is0">
        <Row Margin="Margin.Is0">
            <Column ColumnSize="ColumnSize.Is3.OnFullHD.Is4.OnWidescreen.Is5.OnMobile">
                <Button Clicked="@HideModal" Color="Color.Danger" Class="btn button btn-sized full-width" TextWeight="TextWeight.Bold">
                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Close}"))
                </Button>
            </Column>
        </Row>
    </Container>
</ModalFooter>

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public Modal Modal { get; set; } = new();

    public async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (shortcutDictionary.GetEnumForm(e.Key))
        {
            case ShortcutKeys.ENTER:
            case ShortcutKeys.ESCAPE:
                await HideModal();
                break;
            default:
                break;
        }
    }

    private async Task HideModal()
    {
        var cleanModel = new TaskDto();
        mapper.Map(cleanModel, Task);

        await Modal.Hide();
    }
}