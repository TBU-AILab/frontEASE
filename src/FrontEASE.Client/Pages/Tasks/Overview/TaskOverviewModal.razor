@inject IMapper mapper
@inject IUIService uiService
@inject ITaskManipulationService taskManipulationService
@inject ITaskApiService taskApiService
@inject IResourceHandler resourceHandler
@inject IUIManager uiManager
@inject AppSettings appSettings

<Modal @ref="@Modal" Closing="@OnModalClosing" @bind-Visible="@isModalVisible" Class="modal-dialog-extrawide" Border="Border.Rounded" @onkeydown="HandleKeyDown">
    @if (isModalVisible)
    {
        @if (TaskMetadata.ReloadInProgress)
        {
            <BackgroundLoadSpinner TextColor="TextColor.White" TextSize="TextSize.Large" />
        }

        <ModalContent Centered Shadow="Shadow.Small">
            @if (isTaskLoading)
            {
                <ContentLoadSpinner />
            }
            else
            {
                <CascadingValue Value="Task">
                    <CascadingValue Value="TaskMetadata">
                        <CascadingValue Value="Modal">

                            <GenericModalHeader DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Overview}")} - {Task.Config.Name}")" />

                            <ModalBody Padding="Padding.Is0" Class="bg-custom-primary text-custom-primary">
                                <Container Fluid Height="Height.Is100">
                                    <Row Height="Height.Is100">
                                        <Column ColumnSize="ColumnSize.Is3.OnWidescreen" TextAlignment="TextAlignment.Start" Class="overview-dialog-column" Display="Display.Flex" Flex="Flex.Column" Overflow="Overflow.Auto" Border="Border.Is1.OnEnd">
                                            <TaskSubitemsDataViewSection />
                                        </Column>
                                        <Column ColumnSize="ColumnSize.Is6.OnWidescreen" Class="overview-dialog-column" Display="Display.Flex" Flex="Flex.Column" Overflow="Overflow.Auto" Border="Border.Is1.OnStart.Is1.OnEnd">
                                            <TaskMessagesViewSection />
                                        </Column>
                                        <Column ColumnSize="ColumnSize.Is3.OnWidescreen" TextAlignment="TextAlignment.Start" Class="overview-dialog-column" Height="Height.Is100" Display="Display.Flex" Flex="Flex.Column" Overflow="Overflow.Auto" Border="Border.Is1.OnStart">
                                            <TaskInfoDataViewSection />
                                        </Column>
                                    </Row>

                                </Container>
                            </ModalBody>

                            <TaskOverviewModalFooter @ref="@TaskOverviewModalFooter"/>

                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            }
        </ModalContent>
    }

</Modal>

@code {
    [CascadingParameter]
    public ObservableCollection<TaskInfoDto> Tasks { get; set; } = [];

    [CascadingParameter]
    public TaskInfoDto TaskInfo { get; set; } = new();

    private bool isTaskLoading;
    private bool isModalVisible;
    private CancellationTokenSource? cancellationTokenSource;

    private TaskDto Task;
    private Modal Modal;
    private TaskOverviewModalFooter TaskOverviewModalFooter = new();
    private TaskViewMetadataDto TaskMetadata;

    public TaskOverviewModal()
    {
        Task = new();
        TaskMetadata = new();

        Modal = new Modal();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e) => await TaskOverviewModalFooter.HandleKeyDown(e);

    private async Task ResetCancellationToken()
    {
        if (cancellationTokenSource is not null)
        {
            await cancellationTokenSource.CancelAsync();
            cancellationTokenSource.Dispose();
        }
        cancellationTokenSource = new();
    }

    private async Task OnModalClosing(ModalClosingEventArgs e)
    {
        await ResetCancellationToken();

        TaskMetadata.SelectedMessageID = null;
        isModalVisible = false;
    }

    private async Task ModalShow()
    {
        isModalVisible = true;
        await Modal.Show();
    }

    private async Task ModalHide()
    {
        isModalVisible = false;
        await Modal.Hide();
    }

    public async Task Show()
    {
        isTaskLoading = true;
        await ResetCancellationToken();
        await ModalShow();

        var opened = await taskApiService.LoadTask(TaskInfo.ID);
        if (opened is not null)
        {
            mapper.Map(opened, Task);
        }

        _ = StartPeriodicTaskInfoRefreshCall(cancellationTokenSource!.Token);
        isTaskLoading = false;
    }


    private async Task StartPeriodicTaskInfoRefreshCall(CancellationToken cancellationToken)
    {
        try
        {
            while (!cancellationToken.IsCancellationRequested)
            {
                if (Task.State == TaskState.RUN)
                {
                    TaskMetadata.ReloadInProgress = true;
                    uiService.CallRequestRefresh();

                    var taskInfoNew = await taskApiService.LoadTask(TaskInfo.ID);
                    if (taskInfoNew is not null)
                    {
                        mapper.Map(taskInfoNew, Task);
                    }

                    TaskMetadata.ReloadInProgress = false;
                    uiService.CallRequestRefresh();
                }
                await System.Threading.Tasks.Task.Delay(TimeSpan.FromSeconds(appSettings.PageSettings!.Tasks!.Timers!.SingleTaskStateRefetchIntervalSeconds), cancellationToken);
            }
        }
        catch (Exception ex)
        {
            await Console.Out.WriteLineAsync(ex.Message);
        }
    }
}