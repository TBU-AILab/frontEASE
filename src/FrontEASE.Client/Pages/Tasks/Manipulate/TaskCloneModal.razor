@inject ITaskApiService taskApiService
@inject IUIService uiService
@inject IUIManager uiManager
@inject IResourceHandler resourceHandler
@inject IMapper mapper
@inject IShortcutKeyDictionary shortcutDictionary
@inject Blazored.Toast.Services.IToastService toastService

<Modal @ref="@CloneModal" @bind-Visible="@isModalVisible" Class="modal-dialog-wide" Border="Border.Rounded" @onkeydown="HandleKeyDown">
    @if (isModalVisible)
    {
        <ModalContent Centered Shadow="Shadow.Small" Class="bg-custom-primary">

            <GenericModalHeader DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Clone}")} - {TaskInfo.Name}")" />

            <ModalBody Margin="Margin.Is3.FromTop">
                <Row>
                    <Column ColumnSize="ColumnSize.IsFull">
                        <Form Margin="Margin.Is4.FromTop" Class="text-form-size">
                            <Validations @ref="Validations" Mode="ValidationMode.Auto" Model="CloneModel" ValidateOnLoad="false">
                                <CascadingValue Value="CloneModel">
                                    <TaskCloneDataFormSection Operation="DataOperation.INSERT" FullWidthFields="false" />

                                    <Fields>
                                        <Field ColumnSize="ColumnSize.Is4.OnWidescreen.Is5.OnMobile" Margin="Margin.IsAuto.FromStart.Is5.FromTop">
                                            <Button Clicked="@CloneTask" Class="btn btn-sized button full-width bg-custom-info text-custom-info" Disabled="@cloneInProgress" TextWeight="TextWeight.Bold">
                                                @if (cloneInProgress)
                                                {
                                                    <SpinnerButton SmallControlSpinner="true" DisplayText="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Clone}"))" TextSize="TextSize.Medium" />
                                                }
                                                else
                                                {
                                                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Clone}"))
                                                }
                                            </Button>
                                        </Field>
                                    </Fields>
                                </CascadingValue>
                            </Validations>
                        </Form>
                    </Column>
                </Row>
            </ModalBody>
        </ModalContent>
    }
</Modal>

@code {

    [CascadingParameter]
    public TaskInfoDto TaskInfo { get; set; } = new();

    [CascadingParameter]
    public ObservableCollection<TaskInfoDto> Tasks { get; set; } = [];

    private TaskDuplicateActionRequestDto CloneModel = new();
    private Modal CloneModal = new();
    private Validations Validations = new();

    private bool cloneInProgress = false;
    private bool isModalVisible = false;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        switch (shortcutDictionary.GetEnumForm(e.Key))
        {
            case ShortcutKeys.ENTER:
                await CloneTask();
                break;
            case ShortcutKeys.ESCAPE:
                await HideModal();
                break;
            default:
                break;
        }
    }

    public async Task CloneTask()
    {
        cloneInProgress = true;

        if (await Validations.ValidateAll())
        {
            var cloned = await taskApiService.CloneTask(TaskInfo.ID, CloneModel);
            if (cloned.Count > 0)
            {
                var clonedTaskInfo = mapper.Map<IList<TaskInfoDto>>(cloned);
                foreach (var clonedTask in clonedTaskInfo)
                {
                    Tasks.Insert(0, clonedTask);
                }
                var message = $"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Result}.{UIStateConstants.ActionSuccess}")} - {resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Clone}")}: {TaskInfo.Name}";
                toastService.ShowSuccess(message);
                uiService.CallRequestRefresh();
            }
            await HideModal();
        }

        cloneInProgress = false;
    }

    private Task HideModal()
    {
        mapper.Map(new TaskDuplicateActionRequestDto(), CloneModel);
        isModalVisible = false;
        return CloneModal.Hide();
    }

    public Task ShowModal()
    {
        isModalVisible = true;
        return CloneModal.Show();
    }
}