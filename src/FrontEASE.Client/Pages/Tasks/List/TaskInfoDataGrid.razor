@inject IResourceHandler resourceHandler
@inject IUIService uiService
@inject IUIManager uiManager
@inject AppSettings appSettings


@if (SelectedTasks.Count > 1 && isBulkActionEnabled)
{
    <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Start">
        @if (IsBulkRunEnabled)
        {
            <Button Color="Color.Success"
                    Margin="Margin.Is2.FromEnd"
                    Class="btn btn-sized button"
                    Clicked="@(() => ShowChangeStateModal(SelectedTasks, TaskState.RUN))">
                <Icon Name="IconName.Play" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                <Text>
                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Run}"))
                </Text>
            </Button>
        }

        @if (IsBulkPauseEnabled)
        {
            <Button Color="Color.Warning"
                    Margin="Margin.Is2.FromEnd"
                    Class="btn btn-sized button"
                    Clicked="@(() => ShowChangeStateModal(SelectedTasks, TaskState.PAUSED))">
                <Icon Name="IconName.Pause" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                <Text>
                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Pause}"))
                </Text>
            </Button>
        }

        @if (IsBulkStopEnabled)
        {
            <Button Color="Color.Danger"
                    Margin="Margin.Is2.FromEnd"
                    Class="btn btn-sized button"
                    Clicked="@(() => ShowChangeStateModal(SelectedTasks, TaskState.STOP))">
                <Icon Name="IconName.Stop" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                <Text>
                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Stop}"))
                </Text>
            </Button>
        }

        @if (isBulkDeleteEnabled)
        {
            <Button Color="Color.Danger"
                    Class="btn btn-sized button"
                    Clicked="@(() => ShowDeleteModal(SelectedTasks))">
                <Icon Name="IconName.Delete" IconSize="IconSize.Default" IconStyle="IconStyle.Solid" />
                <Text>
                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Delete}"))
                </Text>
            </Button>
        }
    </Column>
}

<Column ColumnSize="ColumnSize.IsFull" Margin="Margin.Is2.FromTop.Is5.FromBottom" ElementId="tasksGrid">
    <DataGrid TItem="TaskInfoDto"
              Data="@Tasks"
              @ref="@TaskInfoGrid"
              PageSizes="@TaskInfoGridPageSizeOptions"
              Filterable="true"
              FixedHeader="true"
              FixedHeaderDataGridHeight="auto"
              FixedHeaderDataGridMaxHeight="auto"
              ShowPager="true"
              ShowPageSizes="true"
              SelectedRowsChanged="OnSelectionChanged"
              CommandMode="DataGridCommandMode.ButtonRow"
              PagerPosition="DataGridPagerPosition.Bottom"
              SelectionMode="DataGridSelectionMode.Multiple"
              FilterMode="DataGridFilterMode.Default"
              FilterMethod="DataGridFilterMethod.Contains"
              Class="text-custom-primary border-custom-light"
              Responsive>
        <DataGridColumns>

            <DataGridColumn TItem="TaskInfoDto" Caption="@(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Info}"))" Sortable="false" Filterable="false">
                <DisplayTemplate>
                    <Span Style="position: relative;">
                        <Icon Class="action-icon action-icon-info"
                              Name="IconName.InfoCircle"
                              IconSize="IconSize.Large"
                              IconStyle="IconStyle.Solid"
                              MouseOver="@((async(e) => await OnInfoMouseOver(context, e)))"
                              MouseOut="@((async() => await OnInfoMouseOut()))" />
                        @if (hoveredTask == context)
                        {
                            <Div Position="Position.Fixed" Style="@($"{cardPositionStyle}; pointer-events: none;")" Class="top-layer">
                                <TaskGridItemInfoCard TaskInfo="@context" />
                            </Div>
                        }
                    </Span>
                </DisplayTemplate>
            </DataGridColumn>

            <DataGridColumn Field="@nameof(TaskInfoDto.Name)" Caption="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskInfoDto>(nameof(TaskInfoDto.Name), PropertyDisplayResourceType.FIELD)))" Sortable="true" />

            <DataGridColumn Field="@nameof(TaskInfoDto.DateCreated)"
                            Caption="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskInfoDto>(nameof(TaskInfoDto.DateCreated), PropertyDisplayResourceType.FIELD)))"
                            Sortable="true"
                            CustomFilter="@OnDateCreatedCustomFilter">
                <FilterTemplate>
                    <TextEdit Text="@selectedDateCreatedFilter"
                              TextChanged="@( value => { selectedDateCreatedFilter = value; context.TriggerFilterChange(selectedDateCreatedFilter); } )" />
                </FilterTemplate>
                <DisplayTemplate>
                    <Container Fluid>
                        <Row>
                            <Column ColumnSize="ColumnSize.IsFull">
                                <Text>
                                    @context.DateCreated.ToString("dd.MM.yyyy")
                                </Text>
                            </Column>
                            <Column ColumnSize="ColumnSize.IsFull">
                                <Text>
                                    @context.DateCreated.ToString("HH:mm:ss")
                                </Text>
                            </Column>
                        </Row>
                    </Container>
                </DisplayTemplate>
            </DataGridColumn>

            <DataGridColumn TItem="TaskInfoDto"
                            Field="@nameof(TaskInfoDto.Author)"
                            Caption="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskInfoDto>(nameof(TaskInfoDto.Author), PropertyDisplayResourceType.FIELD)))"
                            Sortable="false"
                            CustomFilter="@OnAuthorEmailCustomFilter">
                <FilterTemplate>
                    <TextEdit Text="@selectedEmailFilter" TextChanged="@(value => { selectedEmailFilter = value; context.TriggerFilterChange(selectedEmailFilter); })" />
                </FilterTemplate>
                <DisplayTemplate>
                    <Container Fluid>
                        <Row>
                            <Column ColumnSize="ColumnSize.Is4">
                                <Image Border="Border.RoundedCircle"
                                       Source="@(GetUserImageUrl(context.Author!.Id!.Value))"
                                       Class="full-max-width datagrid-item-image-extrasmall"
                                       Loading />
                            </Column>
                            <Column ColumnSize="ColumnSize.Is8">
                                <Text>
                                    @context.Author.Email
                                </Text>
                            </Column>
                        </Row>
                    </Container>
                </DisplayTemplate>
            </DataGridColumn>

            <DataGridSelectColumn TItem="TaskInfoDto"
                                  Field="@nameof(TaskInfoDto.State)"
                                  Sortable="true"
                                  Caption="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskInfoDto>(nameof(TaskInfoDto.State), PropertyDisplayResourceType.FIELD)))"
                                  TextField="@(state => resourceHandler.GetResource(((TaskState)state).GetEnumResourceValue()))"
                                  ValueField="@(state => state.ToString())"
                                  CustomFilter="@OnStateCustomFilter">
                <FilterTemplate>
                    <Select TValue="string" SelectedValue="@selectedStateFilter" SelectedValueChanged="@(value => { selectedStateFilter = value; context.TriggerFilterChange(selectedStateFilter); })">
                        <SelectItem Value="string.Empty">
                            @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Empty}"))
                        </SelectItem>
                        @foreach (var state in Enum.GetValues(typeof(TaskState)))
                        {
                            <SelectItem Value="@state.ToString()">@resourceHandler.GetResource(((TaskState)state).GetEnumResourceValue())</SelectItem>
                        }
                    </Select>
                </FilterTemplate>
                <DisplayTemplate>
                    @(resourceHandler.GetResource(((TaskState)context.State).GetEnumResourceValue()))
                </DisplayTemplate>
            </DataGridSelectColumn>

            <DataGridColumn TItem="TaskInfoDto" Field="@nameof(TaskInfoDto.ConnectorType)" Caption="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskInfoDto>(nameof(TaskInfoDto.ConnectorType), PropertyDisplayResourceType.FIELD)))" Sortable="true">
                <DisplayTemplate>
                    @(GetModuleLongName(context.ConnectorType, ModuleType.LLM_CONNECTOR) ?? context.ConnectorType)
                </DisplayTemplate>
            </DataGridColumn>

            <DataGridColumn Field="@nameof(TaskInfoDto.SolutionType)" Caption="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskInfoDto>(nameof(TaskInfoDto.SolutionType), PropertyDisplayResourceType.FIELD)))" Sortable="true">
                <DisplayTemplate>
                    @(GetModuleLongName(context.SolutionType, ModuleType.SOLUTION) ?? context.SolutionType)
                </DisplayTemplate>
            </DataGridColumn>

            <DataGridColumn TItem="TaskInfoDto" Caption="@(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Actions}"))" Sortable="false" Filterable="false">
                <DisplayTemplate>

                    @if (runnableTaskStates.Contains(context.State))
                    {
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Run}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon action-icon-success" Name="IconName.Play" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(async () => await ShowChangeStateModal(new List<TaskInfoDto>() { context }, TaskState.RUN))" @onclick:stopPropagation="true" />
                        </Tooltip>
                    }

                    @if (pauseableTaskStates.Contains(context.State))
                    {
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Pause}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon action-icon-warning" Name="IconName.Pause" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(async () => await ShowChangeStateModal(new List<TaskInfoDto>() { context }, TaskState.PAUSED))" @onclick:stopPropagation="true" />
                        </Tooltip>
                    }

                    @if (stoppableTaskStates.Contains(context.State))
                    {
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Stop}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon action-icon-danger" Name="IconName.Stop" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(async () => await ShowChangeStateModal(new List<TaskInfoDto>() { context }, TaskState.STOP))" @onclick:stopPropagation="true" />
                        </Tooltip>
                    }

                    @if (overviewTaskStates.Contains(context.State))
                    {
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Overview}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon action-icon-info" Name="IconName.Search" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(async () => await ShowOverviewModal(context))" @onclick:stopPropagation="true" />
                        </Tooltip>
                    }

                    @if (editableTaskStates.Contains(context.State))
                    {
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Update}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon action-icon-info" Name="IconName.Pen" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(async () => await ShowEditModal(context))" @onclick:stopPropagation="true" />
                        </Tooltip>
                    }

                    @if (cloneableTaskStates.Contains(context.State))
                    {
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Clone}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon action-icon-primary" Name="IconName.Copy" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(async () => await ShowCloneModal(context))" @onclick:stopPropagation="true" />
                        </Tooltip>
                    }

                    @if (deletableTaskStates.Contains(context.State))
                    {
                        <Tooltip Multiline="true" Text="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Delete}"))" Display="Display.InlineBlock" Margin="Padding.Is2.FromEnd" Placement="TooltipPlacement.Top">
                            <Icon Class="action-icon action-icon-danger" Name="IconName.Delete" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(async () => await ShowDeleteModal(new List<TaskInfoDto>() { context }))" @onclick:stopPropagation="true" />
                        </Tooltip>
                    }

                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>

    </DataGrid>
</Column>

<CascadingValue Value="TaskInfo">
    <CascadingValue Value="SelectedTasks">
        <TaskEditModal @ref="EditModal" Operation="DataOperation.UPDATE" />
        <TaskChangeStateModal @ref="ChangeStateModal" Operation="DataOperation.UPDATE" />
        <TaskCloneModal @ref="CloneModal" Operation="DataOperation.UPDATE" />
        <TaskOverviewModal @ref="OverviewModal" Operation="DataOperation.READ" />
        <TaskDeleteModal @ref="DeleteModal" Operation="DataOperation.DELETE" />
    </CascadingValue>
</CascadingValue>


@code {
    [CascadingParameter]
    public ObservableCollection<TaskInfoDto> Tasks { get; set; } = [];

    [CascadingParameter]
    public IList<ApplicationUserDto> AvailableUsers { get; set; } = [];

    [CascadingParameter]
    public IList<TaskModuleNoValidationDto> TaskModuleOptions { get; set; } = [];

    private IList<TaskInfoDto> SelectedTasks = [];

    private TaskInfoDto? hoveredTask;
    private string cardPositionStyle = string.Empty;

    private readonly IList<TaskState> runnableTaskStates = new List<TaskState>() { TaskState.INIT, TaskState.PAUSED };
    private readonly IList<TaskState> pauseableTaskStates = new List<TaskState>() { TaskState.RUN };
    private readonly IList<TaskState> stoppableTaskStates = new List<TaskState>() { TaskState.RUN };
    private readonly IList<TaskState> editableTaskStates = new List<TaskState>() { TaskState.CREATED, TaskState.INIT };
    private readonly IList<TaskState> overviewTaskStates = new List<TaskState>() { TaskState.RUN, TaskState.PAUSED, TaskState.STOP, TaskState.FINISH, TaskState.BREAK };
    private readonly IList<TaskState> deletableTaskStates = new List<TaskState>() { TaskState.CREATED, TaskState.INIT, TaskState.RUN, TaskState.PAUSED, TaskState.STOP, TaskState.BREAK, TaskState.FINISH };
    private readonly IList<TaskState> cloneableTaskStates = new List<TaskState>() { TaskState.CREATED, TaskState.INIT, TaskState.RUN, TaskState.PAUSED, TaskState.STOP, TaskState.BREAK, TaskState.FINISH };

    private TaskEditModal EditModal = new();
    private TaskOverviewModal OverviewModal = new();
    private TaskDeleteModal DeleteModal = new();
    private TaskChangeStateModal ChangeStateModal = new();
    private TaskCloneModal CloneModal = new();

    private TaskInfoDto TaskInfo = new();

    private DataGrid<TaskInfoDto> TaskInfoGrid { get; set; } = new();
    private readonly IList<int> TaskInfoGridPageSizeOptions = new List<int>() { 10, 20, 50, 100, 250 };

    private string selectedStateFilter = string.Empty;
    private string selectedEmailFilter = string.Empty;
    private string selectedDateCreatedFilter = string.Empty;

    private bool IsBulkRunEnabled => SelectedTasks.Count > 1 && SelectedTasks.All(task => runnableTaskStates.Contains(task.State));
    private bool IsBulkPauseEnabled => SelectedTasks.Count > 1 && SelectedTasks.All(task => pauseableTaskStates.Contains(task.State));
    private bool IsBulkStopEnabled => SelectedTasks.Count > 1 && SelectedTasks.All(task => stoppableTaskStates.Contains(task.State));
    private bool isBulkDeleteEnabled => SelectedTasks.Count > 1 && SelectedTasks.All(task => deletableTaskStates.Contains(task.State));
    private bool isBulkActionEnabled => isBulkDeleteEnabled || IsBulkPauseEnabled || IsBulkRunEnabled || IsBulkStopEnabled;

    private async Task OnInfoMouseOver(TaskInfoDto task, MouseEventArgs e)
    {
        hoveredTask = task;
        cardPositionStyle = $"left: {e.ClientX}px; top: {e.ClientY - 80}px;";
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnInfoMouseOut()
    {
        hoveredTask = null;
        await InvokeAsync(StateHasChanged);
    }

    private async Task RefreshViewAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshViewAsync;
        await base.OnInitializedAsync();
    }

    private async Task ShowOverviewModal(TaskInfoDto taskInfo)
    {
        TaskInfo = taskInfo;
        await OverviewModal.Show();
    }

    private async Task ShowDeleteModal(IList<TaskInfoDto> affectedTasks)
    {
        DeleteModal.AffectedTasks = affectedTasks;
        await DeleteModal.ShowModal();
    }

    private async Task ShowEditModal(TaskInfoDto taskInfo)
    {
        TaskInfo = taskInfo;
        await EditModal.Show();
    }

    private async Task ShowCloneModal(TaskInfoDto taskInfo)
    {
        TaskInfo = taskInfo;
        await CloneModal.ShowModal();
    }

    private async Task ShowChangeStateModal(IList<TaskInfoDto> affectedTasks, TaskState state)
    {
        ChangeStateModal.AffectedTasks = affectedTasks;
        await ChangeStateModal.ShowModal(state);
    }

    private IList<TaskInfoDto> GetExistingTasksSelection(IList<TaskInfoDto> selection)
    {
        var selectedIDs = selection.Select(x => x.ID);
        var actualSelection = Tasks.Where(x => selectedIDs.Contains(x.ID));
        return actualSelection.ToList();
    }

    private void OnSelectionChanged(IList<TaskInfoDto> selection)
    {
        SelectedTasks.Clear();
        var actualSelection = GetExistingTasksSelection(selection);
        foreach (var task in actualSelection) { SelectedTasks.Add(task); }
    }

    private bool OnStateCustomFilter(object itemValue, object searchValue)
    {
        if (searchValue is string filter && !string.IsNullOrEmpty(filter))
        {
            return itemValue?.ToString() == filter;
        }
        return true;
    }

    private bool OnAuthorEmailCustomFilter(object itemValue, object searchValue)
    {
        if (searchValue is string filter && !string.IsNullOrEmpty(filter))
        {
            if (itemValue is ApplicationUserDto user)
            {
                return user.Email?.Contains(filter, StringComparison.OrdinalIgnoreCase) ?? false;
            }
        }
        return true;
    }

    private bool OnDateCreatedCustomFilter(object itemValue, object searchValue)
    {
        if (searchValue is string filter && !string.IsNullOrEmpty(filter))
        {
            if (itemValue is DateTime date)
            {
                string formattedDate = date.ToString("dd.MM.yyyy");
                return formattedDate.Contains(filter, StringComparison.OrdinalIgnoreCase);
            }
        }
        return true;
    }

    private string? GetUserImageUrl(Guid userID)
    {
        var userData = AvailableUsers.SingleOrDefault(x => x.Id == userID);
        return string.IsNullOrWhiteSpace(userData?.Image?.ImageUrl) ?
            ImageConstants.UserPicDefault :
            $"{appSettings.ApiSettings!.BaseUrl}/{userData?.Image?.ImageUrl}";
    }

    private string? GetModuleLongName(string shortName, ModuleType packageType)
    {
        var matchedModule = TaskModuleOptions.FirstOrDefault(x => x.PackageType == packageType && x.ShortName == shortName);
        return matchedModule?.LongName;
    }
}
