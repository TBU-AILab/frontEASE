@inject IResourcesManager resourcesManager
@inject IUIManager uiManager
@inject IResourceHandler resourceHandler
@inject IUIService uiService

@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@attribute [Authorize(Roles = $"{UserRoleNames.AdminRoleName}, {UserRoleNames.SuperadminRoleName}")]
@page "/Users"

<ThemeProvider Theme="@uiManager.Theme">
    @if (!isInitialized)
    {
        <PageLoadSpinner />
    }
    else
    {
        <Container Fluid Class="content-main" Padding="Padding.Is5.FromStart.Is5.FromEnd" Margin="Margin.Is5.FromBottom">
            <Row>
                <Column ColumnSize="ColumnSize.Is12" TextAlignment="TextAlignment.Center" Padding="Padding.Is0">
                    <Tabs RenderMode="TabsRenderMode.LazyReload"
                          SelectedTab="@managementTypeSelected.ToString()"
                          SelectedTabChanged="@OnSelectedTabChanged"
                          Class="tab-control"
                          Border="Border.Is0">
                        <Items>
                            @foreach (var managementType in Enum.GetValues(typeof(UserCompanyManagementType)))
                            {
                                <Tab Name="@(managementType.ToString())">
                                    @(resourceHandler.GetResource(((UserCompanyManagementType)managementType).GetEnumResourceValue()))
                                </Tab>
                            }
                        </Items>
                        <Content>
                            @foreach (var personType in Enum.GetValues(typeof(UserCompanyManagementType)))
                            {
                                <CascadingValue Value="Companies">
                                    <CascadingValue Value="Users">
                                        <TabPanel TextAlignment="TextAlignment.Start" Name="@(personType.ToString())">
                                            @switch (managementTypeSelected)
                                            {
                                                case UserCompanyManagementType.USERS:
                                                    <UserManagementTab />
                                                    break;
                                                case UserCompanyManagementType.COMPANIES:
                                                    <CompanyManagementTab />
                                                    break;
                                            }
                                        </TabPanel>
                                    </CascadingValue>
                                </CascadingValue>
                            }
                        </Content>
                    </Tabs>

                </Column>
            </Row>
        </Container>
    }
</ThemeProvider>

@code {
    private Theme Theme = new();

    private IList<CompanyDto> Companies = [];
    private IList<ApplicationUserDto> Users = [];

    private UserCompanyManagementType managementTypeSelected = UserCompanyManagementType.USERS;
    private bool isInitialized = false;

    private void RefreshView()
    { StateHasChanged(); }

    protected override async Task OnInitializedAsync()
    {
        await resourcesManager.AssureResourcesInitialized();
        await uiService.AssureResourcesInitialized();

        uiService.RefreshRequested += RefreshView;
        await base.OnInitializedAsync();

        isInitialized = true;
    }

    private Task OnSelectedTabChanged(string name)
    {
        managementTypeSelected = (UserCompanyManagementType)Enum.Parse(typeof(UserCompanyManagementType), name);
        return Task.CompletedTask;
    }
}