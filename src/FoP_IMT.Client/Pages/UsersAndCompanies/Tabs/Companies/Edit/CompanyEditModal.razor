@inject ICompanyApiService companyApiService
@inject IUIService uiService
@inject IResourceHandler resourceHandler
@inject IMapper mapper
@inject Blazored.Toast.Services.IToastService toastService;
@inject IUIManager uiManager

<Modal @ref="@EditModal" @bind-Visible="@isModalVisible" Class="modal-dialog-wide" Border="Border.Rounded">
    @if (EditModal.Visible)
    {
        <ModalContent Centered Shadow="Shadow.Small" Style="@($"background-color: {uiManager.Theme.BackgroundOptions.Primary}")">

            <GenericModalHeader DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Update}")} - {Company.NameAbbreviation ?? Company.Name}")" />

            <ModalBody Border="Border.Rounded">
                <Row>
                    <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center">
                        <Image Border="Border.RoundedCircle"
                               Source="@(!string.IsNullOrWhiteSpace(CompanyModel.Image?.ImageData) ?
                                        $"data:{CompanyModel.Image.MimeType};base64,{CompanyModel.Image.ImageData}" : !string.IsNullOrWhiteSpace(CompanyModel.Image?.ImageUrl) ?
                                        CompanyModel.Image.ImageUrl : @"\resources\images\companies\companyLogoMissing.png")"
                               Class="full-max-width edit-modal-image"
                               Loading />
                    </Column>
                </Row>

                <Row Margin="Margin.Is3" Padding="Margin.Is3.FromStart.Is3.FromEnd" Border="Border.Rounded" Class="user-modal-form">
                    <Column ColumnSize="ColumnSize.IsFull">
                        <Form>
                            <Validations @ref="Validations" Mode="ValidationMode.Auto" Model="@CompanyModel">
                                <CascadingValue Value="CompanyModel">

                                    <CompanyDataFormSection Operation="DataOperation.UPDATE" FullWidthFields="true" />
                                    <AddressDataFormSection Operation="DataOperation.UPDATE" FullWidthFields="true" />
                                    <CompanyDataUserFormSection />

                                    <Fields>
                                        <Field ColumnSize="ColumnSize.Is3.OnWidescreen" Margin="Margin.IsAuto.FromStart.Is5.FromTop">
                                            <Button style="@($"background-color: {uiManager.Theme.ColorOptions.Info}; color: {uiManager.Theme.TextColorOptions.Primary};")" Clicked="@EditCompany" Class="btn button btn-sized full-width" Disabled="@updateInProgress" TextWeight="TextWeight.Bold">
                                                @if (updateInProgress)
                                                {
                                                    <SpinnerButton DisplayText="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Save}"))" SmallControlSpinner="true" TextSize="TextSize.Medium" />
                                                }
                                                else
                                                {
                                                    @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Save}"))
                                                }
                                            </Button>
                                        </Field>
                                    </Fields>
                                </CascadingValue>
                            </Validations>
                        </Form>
                    </Column>
                </Row>
            </ModalBody>
        </ModalContent>
    }
</Modal>

@code {
    [CascadingParameter]
    public CompanyDto Company { get; set; } = new();

    [CascadingParameter]
    public IList<CompanyDto> Companies { get; set; } = [];

    private Modal EditModal = new();
    private Validations Validations = new();
    private CompanyDto CompanyModel = new();

    private bool updateInProgress = false;
    private bool isModalVisible = false;

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshView;
        await base.OnInitializedAsync();
    }

    private void RefreshView()
    { StateHasChanged(); }

    public async Task EditCompany()
    {
        updateInProgress = true;

        if (await Validations.ValidateAll())
        {
            var editedCompany = await companyApiService.UpdateCompany(CompanyModel);
            if (editedCompany is not null)
            {
                mapper.Map(editedCompany, Company);
                var message = $"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Result}.{UIStateConstants.ActionSuccess}")} - {resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Update}")}: {editedCompany.Name}{(string.IsNullOrWhiteSpace(editedCompany.NameAbbreviation) ? string.Empty : $" ({editedCompany.NameAbbreviation})")}";
                toastService.ShowSuccess(message);

                await HideModal();
            }
        }

        updateInProgress = false;
        uiService.CallRequestRefresh();
    }

    private Task HideModal()
    {
        isModalVisible = false;
        return EditModal.Hide();
    }

    public Task ShowModal()
    {
        CompanyModel = mapper.Map<CompanyDto>(Company);
        isModalVisible = true;
        return EditModal.Show();
    }
}