@inject IMapper mapper
@inject IUIService uiService
@inject ITaskApiService taskApiService
@inject IResourceHandler resourceHandler
@inject Blazored.Toast.Services.IToastService toastService

<Modal @ref="@Modal" @bind-Visible="isModalVisible" Closing="@OnModalClosing" Class="modal-dialog-wide" Border="Border.Rounded">
    @if (isModalVisible)
    {
        @if (TaskMetadata.InitializationInProgres)
        {
            <BackgroundLoadSpinner TextColor="TextColor.White" TextSize="TextSize.Large" />
        }

        <ModalContent Centered Shadow="Shadow.Small">
            @if (isTaskLoading)
            {
                <ContentLoadSpinner />
            }
            else
            {
                <CascadingValue Value="Task">
                    <CascadingValue Value="TaskMetadata">
                        <CascadingValue Value="Modal">

                            <GenericModalHeader DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Save}")}{(string.IsNullOrWhiteSpace(Task.Config?.Name) ? string.Empty : $" - {Task.Config.Name}")}")" />

                            <ModalBody Padding="Padding.Is0">
                                <Container Fluid>
                                    <Row>
                                        <Column ColumnSize="ColumnSize.IsFull">
                                            <Validations @ref="Validations"
                                            Mode="ValidationMode.Auto"
                                            ValidateOnLoad="false"
                                            EditContext="EditContext"
                                            HandlerType="ValidationHandlerType.DataAnnotation">
                                                <CascadingValue Value="Validations">
                                                    <Form Margin="Margin.Is1.FromTop.Is3.FromBottom" Class="text-form-size" Padding="Padding.Is3">
                                                        <TaskSubitemsDataFormSection />
                                                    </Form>
                                                </CascadingValue>
                                            </Validations>
                                        </Column>
                                    </Row>

                                </Container>
                            </ModalBody>

                            <CascadingValue Value="Operation">
                                <TaskEditModalFooter Validations="Validations" />
                            </CascadingValue>

                        </CascadingValue>
                    </CascadingValue>
                </CascadingValue>
            }
        </ModalContent>
    }
</Modal>

@code {
    [CascadingParameter]
    public ObservableCollection<TaskInfoDto> Tasks { get; set; } = null!;

    [CascadingParameter]
    public TaskInfoDto TaskInfo { get; set; } = new();

    [Parameter]
    public DataOperation Operation { get; set; }

    private bool isTaskLoading = false;
    private bool isModalVisible = false;
    private CancellationTokenSource cancellationTokenSource;

    private TaskDto Task;
    private TaskViewMetadataDto TaskMetadata;

    private Modal Modal;
    private Validations Validations;
    private EditContext? EditContext;

    public TaskEditModal()
    {
        Task = new();
        TaskMetadata = new(Task);

        Modal = new Modal();
        cancellationTokenSource = new();
        Validations = new Validations();
    }

    private async Task OnModalClosing(ModalClosingEventArgs e)
    {
        e.Cancel = e.CloseReason != CloseReason.UserClosing;
        if (!e.Cancel)
        {
            isModalVisible = false;
        }

        await cancellationTokenSource.CancelAsync();
        cancellationTokenSource?.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(Task);
        EditContext.OnFieldChanged += OnFieldChanged;
        await base.OnInitializedAsync();
    }

    private async void OnFieldChanged(object? sender, FieldChangedEventArgs e)
    {
        var evaluationNeeded = TaskMetadata.OptionsReloadNecessary();
        if (evaluationNeeded)
        {
            TaskMetadata.InitializationInProgres = true;
            if (cancellationTokenSource is not null)
            {
                await cancellationTokenSource!.CancelAsync();
            }
            cancellationTokenSource = new CancellationTokenSource();

            try
            {
                var token = cancellationTokenSource!.Token;
                await System.Threading.Tasks.Task.Run(async () =>
                {
                    if (!token.IsCancellationRequested)
                    {
                        uiService.CallRequestRefresh();

                        var updated = await taskApiService.RefreshTaskOptions(Task);
                        if (updated is not null && !token.IsCancellationRequested)
                        {
                            mapper.Map(updated, Task);
                        }
                    }

                }, token);
            }
            catch (TaskCanceledException)
            { }
            finally
            {
                TaskMetadata.InitializationInProgres = false;
                uiService.CallRequestRefresh();
            }
        }
    }

    private Task ModalShow()
    {
        isModalVisible = true;
        cancellationTokenSource = new();
        return Modal.Show();
    }

    public async Task Show()
    {
        isTaskLoading = true;
        await ModalShow();

        if (Operation == DataOperation.INSERT)
        {
            var inserted = await taskApiService.InsertTask();
            if (inserted is not null)
            {
                mapper.Map(inserted, Task);
                TaskMetadata.TaskState = TaskMetadata.ComposeSelectedOptions();
                TaskInfo = mapper.Map<TaskInfoDto>(inserted);
            }
        }
        else
        {
            var opened = await taskApiService.LoadTask(TaskInfo.ID);
            if (opened is not null)
            {
                mapper.Map(opened, Task);
                TaskMetadata.TaskState = TaskMetadata.ComposeSelectedOptions();
                TaskMetadata.ComposeSelectedOptions();
            }
        }

        isTaskLoading = false;
        uiService.CallRequestRefresh();
    }
}