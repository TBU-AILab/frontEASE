@inject ITaskApiService taskApiService
@inject IUIService uiService
@inject IResourceHandler resourceHandler
@inject Blazored.Toast.Services.IToastService toastService

<Modal @ref="@ChangeStateModal" @bind-Visible="@isModalVisible">
    @if (isModalVisible)
    {
        <ModalContent Centered Shadow="Shadow.Small">

            <GenericModalHeader DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{GetTaskStateActionConstant()}")} - {TaskInfo.Name}")" />

            <ModalBody Margin="Margin.Is3.FromTop">
                <Row>
                    <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center">
                        <Text Class="font-large">
                            @resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Specific}.{UIActionConstants.StateChange}.{nameof(TaskDto)}.{NewTaskState}.{UIConstants.Question}")
                        </Text>
                    </Column>
                </Row>
                <Row Margin="Margin.Is4.FromTop">
                    <Column ColumnSize="ColumnSize.Is4.OnWidescreen.Is5.OnMobile">
                        <Button Clicked="@ChangeStateTask" Color="Color.Info" Class="btn btn-sized button full-width" Disabled="@changeInProgress" TextWeight="TextWeight.Bold">
                            @if (changeInProgress)
                            {
                                <SpinnerButton SmallControlSpinner="true" DisplayText="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Update}"))" TextSize="TextSize.Medium" />
                            }
                            else
                            {
                                @resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.Yes}")
                            }
                        </Button>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4.OnWidescreen.Is4.WithOffset.OnWidescreen.Is5.OnMobile.Is2.WithOffset.OnMobile">
                        <Button Clicked="@HideModal" Color="Color.Light" Class="btn btn-sized button full-width" TextWeight="TextWeight.Bold" Border="Border.Is1.Rounded">
                            @resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Generic}.{UIValueConstants.No}")
                        </Button>
                    </Column>
                </Row>
            </ModalBody>
        </ModalContent>
    }
</Modal>

@code {

    [CascadingParameter]
    public TaskInfoDto TaskInfo { get; set; } = new();

    [CascadingParameter]
    public ObservableCollection<TaskInfoDto> Tasks { get; set; } = [];

    private TaskState? NewTaskState = null;
    private Modal ChangeStateModal = new();

    private bool changeInProgress = false;
    private bool isModalVisible = false;

    private string GetTaskStateActionConstant()
    {
        switch (NewTaskState!.Value)
        {
            case TaskState.RUN:
                return UIActionConstants.Run;
            case TaskState.STOP:
                return UIActionConstants.Stop;
            case TaskState.PAUSED:
                return UIActionConstants.Pause;
            default:
                return string.Empty;
        }
    }

    public async Task ChangeStateTask()
    {
        changeInProgress = true;

        var updated = await taskApiService.ChangeTaskState(TaskInfo, NewTaskState!.Value);
        if (updated)
        {
            TaskInfo.State = NewTaskState.Value;

            var message = $"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Result}.{UIStateConstants.ActionSuccess}")} - {resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.StateChange}")}: {TaskInfo.Name}";
            toastService.ShowSuccess(message);
            uiService.CallRequestRefresh();
        }

        await HideModal();
        changeInProgress = false;
    }

    private Task HideModal()
    {
        isModalVisible = false;
        return ChangeStateModal.Hide();
    }

    public Task ShowModal(TaskState state)
    {
        NewTaskState = state;
        isModalVisible = true;
        return ChangeStateModal.Show();
    }
}