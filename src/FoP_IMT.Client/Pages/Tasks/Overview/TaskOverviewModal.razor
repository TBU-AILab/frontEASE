@inject IMapper mapper
@inject IUIService uiService
@inject ITaskManipulationService taskManipulationService
@inject ITaskApiService taskApiService
@inject IResourceHandler resourceHandler

<Modal @ref="@Modal" @bind-Visible="@isModalVisible" Class="modal-dialog-extrawide" Border="Border.Rounded">
    @if (isModalVisible)
    {
        <ModalContent Centered Shadow="Shadow.Small">
            @if (isTaskLoading)
            {
                <ContentLoadSpinner />
            }
            else
            {
                <CascadingValue Value="Task">
                    <CascadingValue Value="Modal">

                        <GenericModalHeader DisplayText="@($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Overview}")} - {Task.Config.Name}")" />

                        <ModalBody Padding="Padding.Is0">
                            <Container Fluid Height="Height.Is100">
                                <Row Height="Height.Is100">
                                    <Column ColumnSize="ColumnSize.Is3.OnWidescreen" TextAlignment="TextAlignment.Start" Class="overview-dialog-column" Display="Display.Flex" Flex="Flex.Column" Overflow="Overflow.Auto" Border="Border.Is1.OnEnd">
                                        <TaskSubitemsDataViewSection />
                                    </Column>
                                    <Column ColumnSize="ColumnSize.Is6.OnWidescreen" Class="overview-dialog-column" Display="Display.Flex" Flex="Flex.Column" Overflow="Overflow.Auto" Border="Border.Is1.OnStart.Is1.OnEnd">
                                        <TaskMessagesViewSection />
                                    </Column>
                                    <Column ColumnSize="ColumnSize.Is3.OnWidescreen" TextAlignment="TextAlignment.Start" Class="overview-dialog-column" Height="Height.Is100" Display="Display.Flex" Flex="Flex.Column" Overflow="Overflow.Auto" Border="Border.Is1.OnStart">
                                        <TaskInfoDataViewSection />
                                    </Column>
                                </Row>

                            </Container>
                        </ModalBody>

                        <TaskOverviewModalFooter />

                    </CascadingValue>
                </CascadingValue>
            }
        </ModalContent>
    }

</Modal>

@code {
    [CascadingParameter]
    public ObservableCollection<TaskInfoDto> Tasks { get; set; } = [];

    [CascadingParameter]
    public TaskInfoDto TaskInfo { get; set; } = new();

    private bool isTaskLoading = false;
    private bool isModalVisible = false;

    private TaskDto Task = new();
    private Modal Modal = new();

    private async Task ModalShow()
    {
        isModalVisible = true;
        await Modal.Show();
    }

    public async Task Show()
    {
        isTaskLoading = true;
        await ModalShow();

        var opened = await taskApiService.LoadTask(TaskInfo.ID);
        if (opened is not null)
        {
            mapper.Map(opened, Task);
        }

        _ = StartPeriodicTaskInfoRefreshCall();
        isTaskLoading = false;
    }

    private async Task StartPeriodicTaskInfoRefreshCall()
    {
        await System.Threading.Tasks.Task.Run(async () =>
        {
            while (true)
            {
                var taskInfoNew = await taskApiService.LoadTask(TaskInfo.ID);
                if (taskInfoNew is not null)
                {
                    mapper.Map(taskInfoNew, Task);
                    uiService.CallRequestRefresh();
                }

                await System.Threading.Tasks.Task.Delay(TimeSpan.FromSeconds(5));
            }
        });
    }
}