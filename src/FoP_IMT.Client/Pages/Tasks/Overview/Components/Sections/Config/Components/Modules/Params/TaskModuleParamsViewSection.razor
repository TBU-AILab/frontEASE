@inject IResourceHandler resourceHandler
@inject IMapper mapper

@if (AvailableParams?.Count > 0)
{
    <Row Background="Background.White" Padding="Padding.Is2" Border="Border.Is1.Rounded" Shadow="Shadow.Small" Margin="Margin.Is3.FromTop.Is3.FromBottom" TextOverflow="TextOverflow.Wrap">
        <Column ColumnSize="ColumnSize.IsFull" Display="Display.Flex" Class="justify-content-between align-items-center cursor-pointer" @onclick="@ChangeCollapseState" Background="Background.White" Padding="Padding.Is2" Border="Border.Is1.Rounded" Shadow="Shadow.Small">
            <Div Display="Display.Flex" Width="Width.Is100" Class="justify-content-center">
                <Text TextWeight="TextWeight.Bold" Class="text-center">
                    @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskModuleDto>(nameof(TaskModuleDto.Parameters), PropertyDisplayResourceType.FIELD)))
                </Text>
            </Div>
            <Icon Name="@(!isSectionCollapsed ? IconName.AngleUp : IconName.AngleDown)" TextColor="TextColor.Primary" IconSize="IconSize.x2" IconStyle="IconStyle.Solid" />
        </Column>

        @if (!isSectionCollapsed)
        {
            <Column ColumnSize="ColumnSize.IsFull">
                <Container Fluid>
                    <Row>
                        <Container Fluid Margin="Margin.Is3.FromTop">
                            <Row Padding="Padding.Is0" Flex="Flex.ReverseRow">

                                @foreach (var ParamValue in Module.Parameters)
                                {
                                    if (ParamValue.Value is not null)
                                    {
                                        var ParamOption = AvailableParams.SingleOrDefault(x => x.ShortName == ParamValue.ShortName);

                                        <Fields>
                                            <CascadingValue Value="ParamOption">
                                                <CascadingValue Value="ParamValue">
                                                    <TaskModuleParamValueView />
                                                </CascadingValue>
                                            </CascadingValue>

                                        </Fields>
                                    }
                                }
                            </Row>
                        </Container>
                    </Row>
                </Container>
            </Column>
        }
    </Row>
}

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskModuleDto Module { get; set; } = new();

    [Parameter]
    public IList<TaskModuleParameterNoValidationDto> AvailableParams { get; set; } = null!;


    private bool isSectionCollapsed = true;

    protected override async Task OnInitializedAsync()
    {
        isSectionCollapsed = !(Module.Parameters?.Count > 0);
        await base.OnInitializedAsync();
    }

    private void ChangeCollapseState() => isSectionCollapsed = !isSectionCollapsed;
}