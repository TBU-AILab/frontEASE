@inject IResourceHandler resourceHandler
@inject IFileApiService fileApiService
@inject Blazored.Toast.Services.IToastService toastService

@if (Task.Solutions.Any())
{
    <Row>

        <Container Fluid>
            <TaskSolutionsViewSectionHeader />
        </Container>

        <Divider Class="divider-section" Background="Background.Primary" Shadow="Shadow.Small" />

        <Column ColumnSize="ColumnSize.Is12" Padding="Padding.Is1.FromTop">

            <Container Fluid>
                <Row>
                    @{
                        var messageIDs = Task.Messages.OrderBy(x => x.DateCreated).Select(x => x.ID).ToList();
                        var solutionsOrdered = Task.Solutions.OrderBy(s => messageIDs.IndexOf(s.TaskMessageID)).ToList();
                    }
                    @foreach (var solution in solutionsOrdered)
                    {
                        <Container Fluid
                                   Border="@(TaskMetadata.SelectedMessageID == solution.TaskMessageID ? Border.Is2.Rounded.Secondary : Border.Is1.Rounded)"
                                   Background="Background.Light"
                                   Shadow="Shadow.Small"
                                   Margin="Margin.Is2.FromTop">
                            <Row>

                                <Column ColumnSize="ColumnSize.IsFull">
                                    <Text>
                                        @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskSolutionDto>(nameof(TaskSolutionDto.Fitness), PropertyDisplayResourceType.FIELD))):
                                    </Text>
                                    <Span TextWeight="TextWeight.Bold" TextColor="TextColor.Success">
                                        @($" {solution.Fitness}")
                                    </Span>
                                </Column>

                                @if (!string.IsNullOrEmpty(solution.Feedback))
                                {
                                    <Column ColumnSize="ColumnSize.IsFull">
                                        <Text>
                                            @(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskSolutionDto>(nameof(TaskSolutionDto.Feedback), PropertyDisplayResourceType.FIELD))):
                                        </Text>
                                        <Span TextWeight="TextWeight.Bold" Class="fst-italic">
                                            @($" \"{solution.Feedback} \"")
                                        </Span>
                                    </Column>
                                }

                                <Column ColumnSize="ColumnSize.IsFull">
                                    <Text>
                                        @(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Download}"))
                                    </Text>
                                    @if (solutionDownloadsOngoing.Contains(solution.ID))
                                    {
                                        <Span TextAlignment="TextAlignment.End">
                                            <SpinnerButton TextColor="TextColor.Info" SmallControlSpinner="true" DisplayText="@(resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Download}"))" TextSize="TextSize.Medium" />
                                        </Span>
                                    }
                                    else
                                    {
                                        if (!solutionDownloadsOngoing.Contains(solution.ID))
                                        {
                                            <Icon Class="action-icon action-icon-info" Name="IconName.Download" IconSize="IconSize.Large" IconStyle="IconStyle.Solid" Clicked="@(() => DownloadSolutionArchive(solution))" />
                                        }
                                    }
                                </Column>
                            </Row>

                            @if (solution.Metadata.Any())
                            {
                                <DictionaryExpander Dictionary="@solution.Metadata" DisplayName="@(resourceHandler.GetResource(AttributeExtensions.GetResourceFieldValue<TaskSolutionDto>(nameof(TaskSolutionDto.Metadata), PropertyDisplayResourceType.FIELD)))" MarginParam="Margin.Is2.FromTop.Is2.FromBottom.Is1.FromStart.Is1.FromEnd" />
                            }
                        </Container>
                    }
                </Row>
            </Container>
        </Column>
    </Row>
}

@code {
    [CascadingParameter]
    public TaskDto Task { get; set; } = new();

    [CascadingParameter]
    public TaskViewMetadataDto TaskMetadata { get; set; } = null!;

    private IList<Guid> solutionDownloadsOngoing = [];

    public async Task DownloadSolutionArchive(TaskSolutionDto solution)
    {
        solutionDownloadsOngoing.Add(solution.ID);

        var archiveName = $"{Task.Config.Name}_${solution.ID}";
        var fileSaved = await fileApiService.DownloadDirectory(archiveName, solution.ID, FileSpecification.TASK_SOLUTION_ARCHIVE);
        if (!fileSaved)
        {
            var message = ($"{resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Result}.{UIStateConstants.ActionFail}")} - {resourceHandler.GetResource($"{UIConstants.Base}.{UIConstants.Generic}.{UIActionConstants.Download}")} ({archiveName})");
            toastService.ShowError(message);
        }

        solutionDownloadsOngoing.Remove(solution.ID);
    }
}