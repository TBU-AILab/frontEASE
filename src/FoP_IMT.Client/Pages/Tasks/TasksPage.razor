@inject IManagementApiService managementApiService
@inject IResourcesManager resourcesManager
@inject IUIManager uiManager
@inject IUIService uiService
@inject IMapper mapper

@rendermode @(new InteractiveWebAssemblyRenderMode(false))
@attribute [Authorize]
@page "/"
@page "/Tasks"

<ThemeProvider Theme="@uiManager.Theme">
    @if (!isInitialized)
    {
        <PageLoadSpinner />
    }
    else
    {
        <Container Fluid Class="content-main" Padding="Padding.Is5.FromStart.Is5.FromEnd">
            <Row>
                <Column ColumnSize="ColumnSize.Is12" TextAlignment="TextAlignment.Center" Padding="Padding.Is0">
                    <CascadingValue Value="Tasks">
                        <CascadingValue Value="AvailableCompanies">
                            <CascadingValue Value="AvailableUsers">
                                <CascadingValue Value="Options">
                                    <CascadingValue Value="TaskModuleOptions">
                                        <TaskList />
                                    </CascadingValue>
                                </CascadingValue>
                            </CascadingValue>
                        </CascadingValue>
                    </CascadingValue>
                </Column>
            </Row>
        </Container>
    }

</ThemeProvider>


@code {
    private Theme Theme = new();

    private UserPreferencesDto Options = new();
    private ObservableCollection<TaskInfoDto> Tasks = [];
    private IList<TaskModuleNoValidationDto> TaskModuleOptions = [];
    private IList<ApplicationUserDto> AvailableUsers = [];
    private IList<CompanyDto> AvailableCompanies = [];

    private bool isInitialized;

    protected override async Task OnInitializedAsync()
    {
        await resourcesManager.AssureResourcesInitialized();
        await uiService.AssureResourcesInitialized();

        uiService.RefreshRequested += RefreshView;

        await base.OnInitializedAsync();
        isInitialized = true;
    }

    private void RefreshView()
    { StateHasChanged(); }
}