@inject ITypelistApiService typelistApiService
@inject ITaskApiService taskApiService
@inject IUserApiService userApiService
@inject ICompanyApiService companyApiService
@inject IResourceHandler resourceHandler
@inject ICompanyManipulationService companyManipulationService
@inject ITaskManipulationService taskManipulationService
@inject IManagementApiService managementApiService
@inject IUIService uiService
@inject IMapper mapper


<Container Fluid>
    <TaskListHeader />

    @if (isTasksLoading || isUsersLoading || isCompaniesLoading || isPreferencesLoading || isTaskOptionsLoading)
    {
        <ContentLoadSpinner />
    }
    else
    {
        <Row Margin="Margin.Is2.FromTop">
            @if (Tasks.Any())
            {
                <TaskInfoDataGrid />
            }
            else
            {
                <Column ColumnSize="ColumnSize.IsFull" TextAlignment="TextAlignment.Center" Margin="Margin.Is3.FromTop.Is3.FromBottom">
                    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Dark" TextWeight="TextWeight.Bold">
                        @(resourceHandler.GetResource($"{UIConstants.Data}.{UIConstants.Error}.{HttpStatusCode.NotFound}.{nameof(TaskDto)}.{UIElementConstants.Collection}"))
                    </Heading>
                </Column>
            }
        </Row>
    }
</Container>


@code {
    [CascadingParameter]
    public UserPreferencesDto Options { get; set; } = new();

    [CascadingParameter]
    public ObservableCollection<TaskInfoDto> Tasks { get; set; } = [];

    [CascadingParameter]
    public IList<TaskModuleNoValidationDto> TaskModuleOptions { get; set; } = [];

    [CascadingParameter]
    public IList<ApplicationUserDto> AvailableUsers { get; set; } = [];

    [CascadingParameter]
    public IList<CompanyDto> AvailableCompanies { get; set; } = [];

    private bool isTasksLoading = false;
    private bool isUsersLoading = false;
    private bool isCompaniesLoading = false;
    private bool isPreferencesLoading = false;
    private bool isTaskOptionsLoading = false;

    protected override async Task OnInitializedAsync()
    {
        uiService.RefreshRequested += RefreshView;

        var loadTasksTask = Task.CompletedTask;
        var loadUsersTask = Task.CompletedTask;
        var loadCompaniesTask = Task.CompletedTask;
        var loadPreferencesTask = Task.CompletedTask;
        var loadTaskOptionsTask = Task.CompletedTask;

        isTasksLoading = true;
        loadTasksTask = LoadTasks();

        isUsersLoading = true;
        loadUsersTask = LoadUsers();

        isCompaniesLoading = true;
        loadCompaniesTask = LoadCompanies();

        isPreferencesLoading = true;
        loadPreferencesTask = LoadPreferences();

        isTaskOptionsLoading = true;
        loadTaskOptionsTask = LoadTaskModuleOptions();

        await Task.WhenAll(loadTasksTask, loadUsersTask, loadCompaniesTask, loadPreferencesTask, loadTaskOptionsTask);
        isTasksLoading = isUsersLoading = isCompaniesLoading = isPreferencesLoading = isTaskOptionsLoading = false;

        companyManipulationService.SortUsersToCompanies(AvailableUsers!, AvailableCompanies!);

        _ = StartPeriodicTasksStatusCall();
        await base.OnInitializedAsync();
    }

    private async Task StartPeriodicTasksStatusCall()
    {
        await Task.Run(async () =>
        {
            while (true)
            {
                var taskStatuses = await taskApiService.LoadTaskStatuses();
                taskManipulationService.UpdateTaskStatuses(Tasks, taskStatuses);

                await Task.Delay(TimeSpan.FromSeconds(5));
            }
        });
    }

    private async Task LoadTasks()
    {
        var tasks = await taskApiService.LoadTaskInfos();
        if (tasks.Any())
        {
            Tasks.Clear();
            foreach (var task in tasks) { Tasks.Add(task); }
        }
    }

    private async Task LoadTaskModuleOptions()
    {
        var moduleOptions = await typelistApiService.LoadTaskModuleOptions();
        if (moduleOptions.Any())
        {
            TaskModuleOptions.Clear();
            foreach (var option in moduleOptions) { TaskModuleOptions.Add(option); }
        }
    }

    private async Task LoadUsers()
    {
        var users = await userApiService.LoadUsers();
        if (users?.Any() == true)
        {
            AvailableUsers.Clear();
            foreach (var user in users) { AvailableUsers.Add(user); }
        }
    }

    private async Task LoadCompanies()
    {
        var companies = await companyApiService.LoadCompanies();
        if (companies?.Any() == true)
        {
            AvailableCompanies.Clear();
            foreach (var company in companies) { AvailableCompanies.Add(company); }
        }
    }

    private async Task LoadPreferences()
    {
        var preferences = await managementApiService.LoadPreferences();
        if (preferences is not null)
        {
            mapper.Map(preferences, Options);
        }
    }

    private void RefreshView()
    { StateHasChanged(); }
}
